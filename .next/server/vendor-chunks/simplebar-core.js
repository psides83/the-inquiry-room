"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simplebar-core";
exports.ids = ["vendor-chunks/simplebar-core"];
exports.modules = {

/***/ "(ssr)/./node_modules/simplebar-core/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/simplebar-core/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SimpleBarCore)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=debounce,throttle!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/throttle.js\");\n/* harmony import */ var _barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=debounce,throttle!=!lodash-es */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var can_use_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! can-use-dom */ \"(ssr)/./node_modules/can-use-dom/index.js\");\n/**\n * simplebar-core - v1.2.4\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */ \n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar cachedScrollbarWidth = null;\nvar cachedDevicePixelRatio = null;\nif (can_use_dom__WEBPACK_IMPORTED_MODULE_0__) {\n    window.addEventListener(\"resize\", function() {\n        if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n            cachedDevicePixelRatio = window.devicePixelRatio;\n            cachedScrollbarWidth = null;\n        }\n    });\n}\nfunction scrollbarWidth() {\n    if (cachedScrollbarWidth === null) {\n        if (typeof document === \"undefined\") {\n            cachedScrollbarWidth = 0;\n            return cachedScrollbarWidth;\n        }\n        var body = document.body;\n        var box = document.createElement(\"div\");\n        box.classList.add(\"simplebar-hide-scrollbar\");\n        body.appendChild(box);\n        var width = box.getBoundingClientRect().right;\n        body.removeChild(box);\n        cachedScrollbarWidth = width;\n    }\n    return cachedScrollbarWidth;\n}\nfunction getElementWindow$1(element) {\n    if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {\n        return window;\n    }\n    return element.ownerDocument.defaultView;\n}\nfunction getElementDocument$1(element) {\n    if (!element || !element.ownerDocument) {\n        return document;\n    }\n    return element.ownerDocument;\n}\n// Helper function to retrieve options from element attributes\nvar getOptions$1 = function(obj) {\n    var initialObj = {};\n    var options = Array.prototype.reduce.call(obj, function(acc, attribute) {\n        var option = attribute.name.match(/data-simplebar-(.+)/);\n        if (option) {\n            var key = option[1].replace(/\\W+(.)/g, function(_, chr) {\n                return chr.toUpperCase();\n            });\n            switch(attribute.value){\n                case \"true\":\n                    acc[key] = true;\n                    break;\n                case \"false\":\n                    acc[key] = false;\n                    break;\n                case undefined:\n                    acc[key] = true;\n                    break;\n                default:\n                    acc[key] = attribute.value;\n            }\n        }\n        return acc;\n    }, initialObj);\n    return options;\n};\nfunction addClasses$1(el, classes) {\n    var _a;\n    if (!el) return;\n    (_a = el.classList).add.apply(_a, classes.split(\" \"));\n}\nfunction removeClasses$1(el, classes) {\n    if (!el) return;\n    classes.split(\" \").forEach(function(className) {\n        el.classList.remove(className);\n    });\n}\nfunction classNamesToQuery$1(classNames) {\n    return \".\".concat(classNames.split(\" \").join(\".\"));\n}\nvar helpers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    getElementWindow: getElementWindow$1,\n    getElementDocument: getElementDocument$1,\n    getOptions: getOptions$1,\n    addClasses: addClasses$1,\n    removeClasses: removeClasses$1,\n    classNamesToQuery: classNamesToQuery$1\n});\nvar getElementWindow = getElementWindow$1, getElementDocument = getElementDocument$1, getOptions = getOptions$1, addClasses = addClasses$1, removeClasses = removeClasses$1, classNamesToQuery = classNamesToQuery$1;\nvar SimpleBarCore = /** @class */ function() {\n    function SimpleBarCore(element, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = this;\n        this.removePreventClickId = null;\n        this.minScrollbarWidth = 20;\n        this.stopScrollDelay = 175;\n        this.isScrolling = false;\n        this.isMouseEntering = false;\n        this.scrollXTicking = false;\n        this.scrollYTicking = false;\n        this.wrapperEl = null;\n        this.contentWrapperEl = null;\n        this.contentEl = null;\n        this.offsetEl = null;\n        this.maskEl = null;\n        this.placeholderEl = null;\n        this.heightAutoObserverWrapperEl = null;\n        this.heightAutoObserverEl = null;\n        this.rtlHelpers = null;\n        this.scrollbarWidth = 0;\n        this.resizeObserver = null;\n        this.mutationObserver = null;\n        this.elStyles = null;\n        this.isRtl = null;\n        this.mouseX = 0;\n        this.mouseY = 0;\n        this.onMouseMove = function() {};\n        this.onWindowResize = function() {};\n        this.onStopScrolling = function() {};\n        this.onMouseEntered = function() {};\n        /**\n         * On scroll event handling\n         */ this.onScroll = function() {\n            var elWindow = getElementWindow(_this.el);\n            if (!_this.scrollXTicking) {\n                elWindow.requestAnimationFrame(_this.scrollX);\n                _this.scrollXTicking = true;\n            }\n            if (!_this.scrollYTicking) {\n                elWindow.requestAnimationFrame(_this.scrollY);\n                _this.scrollYTicking = true;\n            }\n            if (!_this.isScrolling) {\n                _this.isScrolling = true;\n                addClasses(_this.el, _this.classNames.scrolling);\n            }\n            _this.showScrollbar(\"x\");\n            _this.showScrollbar(\"y\");\n            _this.onStopScrolling();\n        };\n        this.scrollX = function() {\n            if (_this.axis.x.isOverflowing) {\n                _this.positionScrollbar(\"x\");\n            }\n            _this.scrollXTicking = false;\n        };\n        this.scrollY = function() {\n            if (_this.axis.y.isOverflowing) {\n                _this.positionScrollbar(\"y\");\n            }\n            _this.scrollYTicking = false;\n        };\n        this._onStopScrolling = function() {\n            removeClasses(_this.el, _this.classNames.scrolling);\n            if (_this.options.autoHide) {\n                _this.hideScrollbar(\"x\");\n                _this.hideScrollbar(\"y\");\n            }\n            _this.isScrolling = false;\n        };\n        this.onMouseEnter = function() {\n            if (!_this.isMouseEntering) {\n                addClasses(_this.el, _this.classNames.mouseEntered);\n                _this.showScrollbar(\"x\");\n                _this.showScrollbar(\"y\");\n                _this.isMouseEntering = true;\n            }\n            _this.onMouseEntered();\n        };\n        this._onMouseEntered = function() {\n            removeClasses(_this.el, _this.classNames.mouseEntered);\n            if (_this.options.autoHide) {\n                _this.hideScrollbar(\"x\");\n                _this.hideScrollbar(\"y\");\n            }\n            _this.isMouseEntering = false;\n        };\n        this._onMouseMove = function(e) {\n            _this.mouseX = e.clientX;\n            _this.mouseY = e.clientY;\n            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                _this.onMouseMoveForAxis(\"x\");\n            }\n            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                _this.onMouseMoveForAxis(\"y\");\n            }\n        };\n        this.onMouseLeave = function() {\n            _this.onMouseMove.cancel();\n            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                _this.onMouseLeaveForAxis(\"x\");\n            }\n            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                _this.onMouseLeaveForAxis(\"y\");\n            }\n            _this.mouseX = -1;\n            _this.mouseY = -1;\n        };\n        this._onWindowResize = function() {\n            // Recalculate scrollbarWidth in case it's a zoom\n            _this.scrollbarWidth = _this.getScrollbarWidth();\n            _this.hideNativeScrollbar();\n        };\n        this.onPointerEvent = function(e) {\n            if (!_this.axis.x.track.el || !_this.axis.y.track.el || !_this.axis.x.scrollbar.el || !_this.axis.y.scrollbar.el) return;\n            var isWithinTrackXBounds, isWithinTrackYBounds;\n            _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n            _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n            if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n                isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\n            }\n            if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n                isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\n            }\n            // If any pointer event is called on the scrollbar\n            if (isWithinTrackXBounds || isWithinTrackYBounds) {\n                // Prevent event leaking\n                e.stopPropagation();\n                if (e.type === \"pointerdown\" && e.pointerType !== \"touch\") {\n                    if (isWithinTrackXBounds) {\n                        _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();\n                        if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\n                            _this.onDragStart(e, \"x\");\n                        } else {\n                            _this.onTrackClick(e, \"x\");\n                        }\n                    }\n                    if (isWithinTrackYBounds) {\n                        _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();\n                        if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\n                            _this.onDragStart(e, \"y\");\n                        } else {\n                            _this.onTrackClick(e, \"y\");\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * Drag scrollbar handle\n         */ this.drag = function(e) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n            if (!_this.draggedAxis || !_this.contentWrapperEl) return;\n            var eventOffset;\n            var track = _this.axis[_this.draggedAxis].track;\n            var trackSize = (_b = (_a = track.rect) === null || _a === void 0 ? void 0 : _a[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _b !== void 0 ? _b : 0;\n            var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n            var contentSize = (_d = (_c = _this.contentWrapperEl) === null || _c === void 0 ? void 0 : _c[_this.axis[_this.draggedAxis].scrollSizeAttr]) !== null && _d !== void 0 ? _d : 0;\n            var hostSize = parseInt((_f = (_e = _this.elStyles) === null || _e === void 0 ? void 0 : _e[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _f !== void 0 ? _f : \"0px\", 10);\n            e.preventDefault();\n            e.stopPropagation();\n            if (_this.draggedAxis === \"y\") {\n                eventOffset = e.pageY;\n            } else {\n                eventOffset = e.pageX;\n            }\n            // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n            var dragPos = eventOffset - ((_h = (_g = track.rect) === null || _g === void 0 ? void 0 : _g[_this.axis[_this.draggedAxis].offsetAttr]) !== null && _h !== void 0 ? _h : 0) - _this.axis[_this.draggedAxis].dragOffset;\n            dragPos = _this.draggedAxis === \"x\" && _this.isRtl ? ((_k = (_j = track.rect) === null || _j === void 0 ? void 0 : _j[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _k !== void 0 ? _k : 0) - scrollbar.size - dragPos : dragPos;\n            // Convert the mouse position into a percentage of the scrollbar height/width.\n            var dragPerc = dragPos / (trackSize - scrollbar.size);\n            // Scroll the content by the same percentage.\n            var scrollPos = dragPerc * (contentSize - hostSize);\n            // Fix browsers inconsistency on RTL\n            if (_this.draggedAxis === \"x\" && _this.isRtl) {\n                scrollPos = ((_l = SimpleBarCore.getRtlHelpers()) === null || _l === void 0 ? void 0 : _l.isScrollingToNegative) ? -scrollPos : scrollPos;\n            }\n            _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;\n        };\n        /**\n         * End scroll handle drag\n         */ this.onEndDrag = function(e) {\n            var elDocument = getElementDocument(_this.el);\n            var elWindow = getElementWindow(_this.el);\n            e.preventDefault();\n            e.stopPropagation();\n            removeClasses(_this.el, _this.classNames.dragging);\n            elDocument.removeEventListener(\"mousemove\", _this.drag, true);\n            elDocument.removeEventListener(\"mouseup\", _this.onEndDrag, true);\n            _this.removePreventClickId = elWindow.setTimeout(function() {\n                // Remove these asynchronously so we still suppress click events\n                // generated simultaneously with mouseup.\n                elDocument.removeEventListener(\"click\", _this.preventClick, true);\n                elDocument.removeEventListener(\"dblclick\", _this.preventClick, true);\n                _this.removePreventClickId = null;\n            });\n        };\n        /**\n         * Handler to ignore click events during drag\n         */ this.preventClick = function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n        this.el = element;\n        this.options = __assign(__assign({}, SimpleBarCore.defaultOptions), options);\n        this.classNames = __assign(__assign({}, SimpleBarCore.defaultOptions.classNames), options.classNames);\n        this.axis = {\n            x: {\n                scrollOffsetAttr: \"scrollLeft\",\n                sizeAttr: \"width\",\n                scrollSizeAttr: \"scrollWidth\",\n                offsetSizeAttr: \"offsetWidth\",\n                offsetAttr: \"left\",\n                overflowAttr: \"overflowX\",\n                dragOffset: 0,\n                isOverflowing: true,\n                forceVisible: false,\n                track: {\n                    size: null,\n                    el: null,\n                    rect: null,\n                    isVisible: false\n                },\n                scrollbar: {\n                    size: null,\n                    el: null,\n                    rect: null,\n                    isVisible: false\n                }\n            },\n            y: {\n                scrollOffsetAttr: \"scrollTop\",\n                sizeAttr: \"height\",\n                scrollSizeAttr: \"scrollHeight\",\n                offsetSizeAttr: \"offsetHeight\",\n                offsetAttr: \"top\",\n                overflowAttr: \"overflowY\",\n                dragOffset: 0,\n                isOverflowing: true,\n                forceVisible: false,\n                track: {\n                    size: null,\n                    el: null,\n                    rect: null,\n                    isVisible: false\n                },\n                scrollbar: {\n                    size: null,\n                    el: null,\n                    rect: null,\n                    isVisible: false\n                }\n            }\n        };\n        if (typeof this.el !== \"object\" || !this.el.nodeName) {\n            throw new Error(\"Argument passed to SimpleBar must be an HTML element instead of \".concat(this.el));\n        }\n        this.onMouseMove = (0,_barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this._onMouseMove, 64);\n        this.onWindowResize = (0,_barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this._onWindowResize, 64, {\n            leading: true\n        });\n        this.onStopScrolling = (0,_barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this._onStopScrolling, this.stopScrollDelay);\n        this.onMouseEntered = (0,_barrel_optimize_names_debounce_throttle_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this._onMouseEntered, this.stopScrollDelay);\n        this.init();\n    }\n    /**\n     * Helper to fix browsers inconsistency on RTL:\n     *  - Firefox inverts the scrollbar initial position\n     *  - IE11 inverts both scrollbar position and scrolling offset\n     * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n     */ SimpleBarCore.getRtlHelpers = function() {\n        if (SimpleBarCore.rtlHelpers) {\n            return SimpleBarCore.rtlHelpers;\n        }\n        var dummyDiv = document.createElement(\"div\");\n        dummyDiv.innerHTML = '<div class=\"simplebar-dummy-scrollbar-size\"><div></div></div>';\n        var scrollbarDummyEl = dummyDiv.firstElementChild;\n        var dummyChild = scrollbarDummyEl === null || scrollbarDummyEl === void 0 ? void 0 : scrollbarDummyEl.firstElementChild;\n        if (!dummyChild) return null;\n        document.body.appendChild(scrollbarDummyEl);\n        scrollbarDummyEl.scrollLeft = 0;\n        var dummyContainerOffset = SimpleBarCore.getOffset(scrollbarDummyEl);\n        var dummyChildOffset = SimpleBarCore.getOffset(dummyChild);\n        scrollbarDummyEl.scrollLeft = -999;\n        var dummyChildOffsetAfterScroll = SimpleBarCore.getOffset(dummyChild);\n        document.body.removeChild(scrollbarDummyEl);\n        SimpleBarCore.rtlHelpers = {\n            // determines if the scrolling is responding with negative values\n            isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,\n            // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n            isScrollingToNegative: dummyChildOffset.left !== dummyChildOffsetAfterScroll.left\n        };\n        return SimpleBarCore.rtlHelpers;\n    };\n    SimpleBarCore.prototype.getScrollbarWidth = function() {\n        // Try/catch for FF 56 throwing on undefined computedStyles\n        try {\n            // Detect browsers supporting CSS scrollbar styling and do not calculate\n            if (this.contentWrapperEl && getComputedStyle(this.contentWrapperEl, \"::-webkit-scrollbar\").display === \"none\" || \"scrollbarWidth\" in document.documentElement.style || \"-ms-overflow-style\" in document.documentElement.style) {\n                return 0;\n            } else {\n                return scrollbarWidth();\n            }\n        } catch (e) {\n            return scrollbarWidth();\n        }\n    };\n    SimpleBarCore.getOffset = function(el) {\n        var rect = el.getBoundingClientRect();\n        var elDocument = getElementDocument(el);\n        var elWindow = getElementWindow(el);\n        return {\n            top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n            left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n        };\n    };\n    SimpleBarCore.prototype.init = function() {\n        // We stop here on server-side\n        if (can_use_dom__WEBPACK_IMPORTED_MODULE_0__) {\n            this.initDOM();\n            this.rtlHelpers = SimpleBarCore.getRtlHelpers();\n            this.scrollbarWidth = this.getScrollbarWidth();\n            this.recalculate();\n            this.initListeners();\n        }\n    };\n    SimpleBarCore.prototype.initDOM = function() {\n        var _a, _b;\n        // assume that element has his DOM already initiated\n        this.wrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.wrapper));\n        this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(classNamesToQuery(this.classNames.contentWrapper));\n        this.contentEl = this.options.contentNode || this.el.querySelector(classNamesToQuery(this.classNames.contentEl));\n        this.offsetEl = this.el.querySelector(classNamesToQuery(this.classNames.offset));\n        this.maskEl = this.el.querySelector(classNamesToQuery(this.classNames.mask));\n        this.placeholderEl = this.findChild(this.wrapperEl, classNamesToQuery(this.classNames.placeholder));\n        this.heightAutoObserverWrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverWrapperEl));\n        this.heightAutoObserverEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverEl));\n        this.axis.x.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.horizontal)));\n        this.axis.y.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.vertical)));\n        this.axis.x.scrollbar.el = ((_a = this.axis.x.track.el) === null || _a === void 0 ? void 0 : _a.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\n        this.axis.y.scrollbar.el = ((_b = this.axis.y.track.el) === null || _b === void 0 ? void 0 : _b.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\n        if (!this.options.autoHide) {\n            addClasses(this.axis.x.scrollbar.el, this.classNames.visible);\n            addClasses(this.axis.y.scrollbar.el, this.classNames.visible);\n        }\n    };\n    SimpleBarCore.prototype.initListeners = function() {\n        var _this = this;\n        var _a;\n        var elWindow = getElementWindow(this.el);\n        // Event listeners\n        this.el.addEventListener(\"mouseenter\", this.onMouseEnter);\n        this.el.addEventListener(\"pointerdown\", this.onPointerEvent, true);\n        this.el.addEventListener(\"mousemove\", this.onMouseMove);\n        this.el.addEventListener(\"mouseleave\", this.onMouseLeave);\n        (_a = this.contentWrapperEl) === null || _a === void 0 ? void 0 : _a.addEventListener(\"scroll\", this.onScroll);\n        // Browser zoom triggers a window resize\n        elWindow.addEventListener(\"resize\", this.onWindowResize);\n        if (!this.contentEl) return;\n        if (window.ResizeObserver) {\n            // Hack for https://github.com/WICG/ResizeObserver/issues/38\n            var resizeObserverStarted_1 = false;\n            var resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n            this.resizeObserver = new resizeObserver(function() {\n                if (!resizeObserverStarted_1) return;\n                elWindow.requestAnimationFrame(function() {\n                    _this.recalculate();\n                });\n            });\n            this.resizeObserver.observe(this.el);\n            this.resizeObserver.observe(this.contentEl);\n            elWindow.requestAnimationFrame(function() {\n                resizeObserverStarted_1 = true;\n            });\n        }\n        // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n        this.mutationObserver = new elWindow.MutationObserver(function() {\n            elWindow.requestAnimationFrame(function() {\n                _this.recalculate();\n            });\n        });\n        this.mutationObserver.observe(this.contentEl, {\n            childList: true,\n            subtree: true,\n            characterData: true\n        });\n    };\n    SimpleBarCore.prototype.recalculate = function() {\n        if (!this.heightAutoObserverEl || !this.contentEl || !this.contentWrapperEl || !this.wrapperEl || !this.placeholderEl) return;\n        var elWindow = getElementWindow(this.el);\n        this.elStyles = elWindow.getComputedStyle(this.el);\n        this.isRtl = this.elStyles.direction === \"rtl\";\n        var contentElOffsetWidth = this.contentEl.offsetWidth;\n        var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n        var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;\n        var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n        var elOverflowX = this.elStyles.overflowX;\n        var elOverflowY = this.elStyles.overflowY;\n        this.contentEl.style.padding = \"\".concat(this.elStyles.paddingTop, \" \").concat(this.elStyles.paddingRight, \" \").concat(this.elStyles.paddingBottom, \" \").concat(this.elStyles.paddingLeft);\n        this.wrapperEl.style.margin = \"-\".concat(this.elStyles.paddingTop, \" -\").concat(this.elStyles.paddingRight, \" -\").concat(this.elStyles.paddingBottom, \" -\").concat(this.elStyles.paddingLeft);\n        var contentElScrollHeight = this.contentEl.scrollHeight;\n        var contentElScrollWidth = this.contentEl.scrollWidth;\n        this.contentWrapperEl.style.height = isHeightAuto ? \"auto\" : \"100%\";\n        // Determine placeholder size\n        this.placeholderEl.style.width = isWidthAuto ? \"\".concat(contentElOffsetWidth || contentElScrollWidth, \"px\") : \"auto\";\n        this.placeholderEl.style.height = \"\".concat(contentElScrollHeight, \"px\");\n        var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n        this.axis.x.isOverflowing = contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;\n        this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight;\n        // Set isOverflowing to false if user explicitely set hidden overflow\n        this.axis.x.isOverflowing = elOverflowX === \"hidden\" ? false : this.axis.x.isOverflowing;\n        this.axis.y.isOverflowing = elOverflowY === \"hidden\" ? false : this.axis.y.isOverflowing;\n        this.axis.x.forceVisible = this.options.forceVisible === \"x\" || this.options.forceVisible === true;\n        this.axis.y.forceVisible = this.options.forceVisible === \"y\" || this.options.forceVisible === true;\n        this.hideNativeScrollbar();\n        // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n        var offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;\n        var offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n        this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n        this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;\n        this.axis.x.scrollbar.size = this.getScrollbarSize(\"x\");\n        this.axis.y.scrollbar.size = this.getScrollbarSize(\"y\");\n        if (this.axis.x.scrollbar.el) this.axis.x.scrollbar.el.style.width = \"\".concat(this.axis.x.scrollbar.size, \"px\");\n        if (this.axis.y.scrollbar.el) this.axis.y.scrollbar.el.style.height = \"\".concat(this.axis.y.scrollbar.size, \"px\");\n        this.positionScrollbar(\"x\");\n        this.positionScrollbar(\"y\");\n        this.toggleTrackVisibility(\"x\");\n        this.toggleTrackVisibility(\"y\");\n    };\n    /**\n     * Calculate scrollbar size\n     */ SimpleBarCore.prototype.getScrollbarSize = function(axis) {\n        var _a, _b;\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        if (!this.axis[axis].isOverflowing || !this.contentEl) {\n            return 0;\n        }\n        var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n        var trackSize = (_b = (_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) !== null && _b !== void 0 ? _b : 0;\n        var scrollbarRatio = trackSize / contentSize;\n        var scrollbarSize;\n        // Calculate new height/position of drag handle.\n        scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n        if (this.options.scrollbarMaxSize) {\n            scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n        }\n        return scrollbarSize;\n    };\n    SimpleBarCore.prototype.positionScrollbar = function(axis) {\n        var _a, _b, _c;\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        var scrollbar = this.axis[axis].scrollbar;\n        if (!this.axis[axis].isOverflowing || !this.contentWrapperEl || !scrollbar.el || !this.elStyles) {\n            return;\n        }\n        var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n        var trackSize = ((_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) || 0;\n        var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n        var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n        scrollOffset = axis === \"x\" && this.isRtl && ((_b = SimpleBarCore.getRtlHelpers()) === null || _b === void 0 ? void 0 : _b.isScrollOriginAtZero) ? -scrollOffset : scrollOffset;\n        if (axis === \"x\" && this.isRtl) {\n            scrollOffset = ((_c = SimpleBarCore.getRtlHelpers()) === null || _c === void 0 ? void 0 : _c.isScrollingToNegative) ? scrollOffset : -scrollOffset;\n        }\n        var scrollPourcent = scrollOffset / (contentSize - hostSize);\n        var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n        handleOffset = axis === \"x\" && this.isRtl ? -handleOffset + (trackSize - scrollbar.size) : handleOffset;\n        scrollbar.el.style.transform = axis === \"x\" ? \"translate3d(\".concat(handleOffset, \"px, 0, 0)\") : \"translate3d(0, \".concat(handleOffset, \"px, 0)\");\n    };\n    SimpleBarCore.prototype.toggleTrackVisibility = function(axis) {\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        var track = this.axis[axis].track.el;\n        var scrollbar = this.axis[axis].scrollbar.el;\n        if (!track || !scrollbar || !this.contentWrapperEl) return;\n        if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n            track.style.visibility = \"visible\";\n            this.contentWrapperEl.style[this.axis[axis].overflowAttr] = \"scroll\";\n            this.el.classList.add(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\n        } else {\n            track.style.visibility = \"hidden\";\n            this.contentWrapperEl.style[this.axis[axis].overflowAttr] = \"hidden\";\n            this.el.classList.remove(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\n        }\n        // Even if forceVisible is enabled, scrollbar itself should be hidden\n        if (this.axis[axis].isOverflowing) {\n            scrollbar.style.display = \"block\";\n        } else {\n            scrollbar.style.display = \"none\";\n        }\n    };\n    SimpleBarCore.prototype.showScrollbar = function(axis) {\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        if (this.axis[axis].isOverflowing && !this.axis[axis].scrollbar.isVisible) {\n            addClasses(this.axis[axis].scrollbar.el, this.classNames.visible);\n            this.axis[axis].scrollbar.isVisible = true;\n        }\n    };\n    SimpleBarCore.prototype.hideScrollbar = function(axis) {\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        if (this.axis[axis].isOverflowing && this.axis[axis].scrollbar.isVisible) {\n            removeClasses(this.axis[axis].scrollbar.el, this.classNames.visible);\n            this.axis[axis].scrollbar.isVisible = false;\n        }\n    };\n    SimpleBarCore.prototype.hideNativeScrollbar = function() {\n        if (!this.offsetEl) return;\n        this.offsetEl.style[this.isRtl ? \"left\" : \"right\"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\".concat(this.scrollbarWidth, \"px\") : \"0px\";\n        this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\".concat(this.scrollbarWidth, \"px\") : \"0px\";\n    };\n    SimpleBarCore.prototype.onMouseMoveForAxis = function(axis) {\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        var currentAxis = this.axis[axis];\n        if (!currentAxis.track.el || !currentAxis.scrollbar.el) return;\n        currentAxis.track.rect = currentAxis.track.el.getBoundingClientRect();\n        currentAxis.scrollbar.rect = currentAxis.scrollbar.el.getBoundingClientRect();\n        if (this.isWithinBounds(currentAxis.track.rect)) {\n            this.showScrollbar(axis);\n            addClasses(currentAxis.track.el, this.classNames.hover);\n            if (this.isWithinBounds(currentAxis.scrollbar.rect)) {\n                addClasses(currentAxis.scrollbar.el, this.classNames.hover);\n            } else {\n                removeClasses(currentAxis.scrollbar.el, this.classNames.hover);\n            }\n        } else {\n            removeClasses(currentAxis.track.el, this.classNames.hover);\n            if (this.options.autoHide) {\n                this.hideScrollbar(axis);\n            }\n        }\n    };\n    SimpleBarCore.prototype.onMouseLeaveForAxis = function(axis) {\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        removeClasses(this.axis[axis].track.el, this.classNames.hover);\n        removeClasses(this.axis[axis].scrollbar.el, this.classNames.hover);\n        if (this.options.autoHide) {\n            this.hideScrollbar(axis);\n        }\n    };\n    /**\n     * on scrollbar handle drag movement starts\n     */ SimpleBarCore.prototype.onDragStart = function(e, axis) {\n        var _a;\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        var elDocument = getElementDocument(this.el);\n        var elWindow = getElementWindow(this.el);\n        var scrollbar = this.axis[axis].scrollbar;\n        // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n        var eventOffset = axis === \"y\" ? e.pageY : e.pageX;\n        this.axis[axis].dragOffset = eventOffset - (((_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) || 0);\n        this.draggedAxis = axis;\n        addClasses(this.el, this.classNames.dragging);\n        elDocument.addEventListener(\"mousemove\", this.drag, true);\n        elDocument.addEventListener(\"mouseup\", this.onEndDrag, true);\n        if (this.removePreventClickId === null) {\n            elDocument.addEventListener(\"click\", this.preventClick, true);\n            elDocument.addEventListener(\"dblclick\", this.preventClick, true);\n        } else {\n            elWindow.clearTimeout(this.removePreventClickId);\n            this.removePreventClickId = null;\n        }\n    };\n    SimpleBarCore.prototype.onTrackClick = function(e, axis) {\n        var _this = this;\n        var _a, _b, _c, _d;\n        if (axis === void 0) {\n            axis = \"y\";\n        }\n        var currentAxis = this.axis[axis];\n        if (!this.options.clickOnTrack || !currentAxis.scrollbar.el || !this.contentWrapperEl) return;\n        // Preventing the event's default to trigger click underneath\n        e.preventDefault();\n        var elWindow = getElementWindow(this.el);\n        this.axis[axis].scrollbar.rect = currentAxis.scrollbar.el.getBoundingClientRect();\n        var scrollbar = this.axis[axis].scrollbar;\n        var scrollbarOffset = (_b = (_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) !== null && _b !== void 0 ? _b : 0;\n        var hostSize = parseInt((_d = (_c = this.elStyles) === null || _c === void 0 ? void 0 : _c[this.axis[axis].sizeAttr]) !== null && _d !== void 0 ? _d : \"0px\", 10);\n        var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n        var t = axis === \"y\" ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;\n        var dir = t < 0 ? -1 : 1;\n        var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n        var speed = 40;\n        var scrollTo = function() {\n            if (!_this.contentWrapperEl) return;\n            if (dir === -1) {\n                if (scrolled > scrollSize) {\n                    scrolled -= speed;\n                    _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\n                    elWindow.requestAnimationFrame(scrollTo);\n                }\n            } else {\n                if (scrolled < scrollSize) {\n                    scrolled += speed;\n                    _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\n                    elWindow.requestAnimationFrame(scrollTo);\n                }\n            }\n        };\n        scrollTo();\n    };\n    /**\n     * Getter for content element\n     */ SimpleBarCore.prototype.getContentElement = function() {\n        return this.contentEl;\n    };\n    /**\n     * Getter for original scrolling element\n     */ SimpleBarCore.prototype.getScrollElement = function() {\n        return this.contentWrapperEl;\n    };\n    SimpleBarCore.prototype.removeListeners = function() {\n        var elWindow = getElementWindow(this.el);\n        // Event listeners\n        this.el.removeEventListener(\"mouseenter\", this.onMouseEnter);\n        this.el.removeEventListener(\"pointerdown\", this.onPointerEvent, true);\n        this.el.removeEventListener(\"mousemove\", this.onMouseMove);\n        this.el.removeEventListener(\"mouseleave\", this.onMouseLeave);\n        if (this.contentWrapperEl) {\n            this.contentWrapperEl.removeEventListener(\"scroll\", this.onScroll);\n        }\n        elWindow.removeEventListener(\"resize\", this.onWindowResize);\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n        // Cancel all debounced functions\n        this.onMouseMove.cancel();\n        this.onWindowResize.cancel();\n        this.onStopScrolling.cancel();\n        this.onMouseEntered.cancel();\n    };\n    /**\n     * Remove all listeners from DOM nodes\n     */ SimpleBarCore.prototype.unMount = function() {\n        this.removeListeners();\n    };\n    /**\n     * Check if mouse is within bounds\n     */ SimpleBarCore.prototype.isWithinBounds = function(bbox) {\n        return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n    };\n    /**\n     * Find element children matches query\n     */ SimpleBarCore.prototype.findChild = function(el, query) {\n        var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n        return Array.prototype.filter.call(el.children, function(child) {\n            return matches.call(child, query);\n        })[0];\n    };\n    SimpleBarCore.rtlHelpers = null;\n    SimpleBarCore.defaultOptions = {\n        forceVisible: false,\n        clickOnTrack: true,\n        scrollbarMinSize: 25,\n        scrollbarMaxSize: 0,\n        ariaLabel: \"scrollable content\",\n        classNames: {\n            contentEl: \"simplebar-content\",\n            contentWrapper: \"simplebar-content-wrapper\",\n            offset: \"simplebar-offset\",\n            mask: \"simplebar-mask\",\n            wrapper: \"simplebar-wrapper\",\n            placeholder: \"simplebar-placeholder\",\n            scrollbar: \"simplebar-scrollbar\",\n            track: \"simplebar-track\",\n            heightAutoObserverWrapperEl: \"simplebar-height-auto-observer-wrapper\",\n            heightAutoObserverEl: \"simplebar-height-auto-observer\",\n            visible: \"simplebar-visible\",\n            horizontal: \"simplebar-horizontal\",\n            vertical: \"simplebar-vertical\",\n            hover: \"simplebar-hover\",\n            dragging: \"simplebar-dragging\",\n            scrolling: \"simplebar-scrolling\",\n            scrollable: \"simplebar-scrollable\",\n            mouseEntered: \"simplebar-mouse-entered\"\n        },\n        scrollableNode: null,\n        contentNode: null,\n        autoHide: true\n    };\n    /**\n     * Static functions\n     */ SimpleBarCore.getOptions = getOptions;\n    SimpleBarCore.helpers = helpers;\n    return SimpleBarCore;\n}();\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlYmFyLWNvcmUvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFOEM7QUFDWDtBQUVwQzs7Ozs7Ozs7Ozs7Ozs4RUFhOEUsR0FFOUUsSUFBSUcsV0FBVztJQUNYQSxXQUFXQyxPQUFPQyxNQUFNLElBQUksU0FBU0YsU0FBU0csQ0FBQztRQUMzQyxJQUFLLElBQUlDLEdBQUdDLElBQUksR0FBR0MsSUFBSUMsVUFBVUMsTUFBTSxFQUFFSCxJQUFJQyxHQUFHRCxJQUFLO1lBQ2pERCxJQUFJRyxTQUFTLENBQUNGLEVBQUU7WUFDaEIsSUFBSyxJQUFJSSxLQUFLTCxFQUFHLElBQUlILE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQUlOLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7UUFDaEY7UUFDQSxPQUFPTjtJQUNYO0lBQ0EsT0FBT0gsU0FBU2EsS0FBSyxDQUFDLElBQUksRUFBRU47QUFDaEM7QUFFQSxJQUFJTyx1QkFBdUI7QUFDM0IsSUFBSUMseUJBQXlCO0FBQzdCLElBQUloQix3Q0FBU0EsRUFBRTtJQUNYaUIsT0FBT0MsZ0JBQWdCLENBQUMsVUFBVTtRQUM5QixJQUFJRiwyQkFBMkJDLE9BQU9FLGdCQUFnQixFQUFFO1lBQ3BESCx5QkFBeUJDLE9BQU9FLGdCQUFnQjtZQUNoREosdUJBQXVCO1FBQzNCO0lBQ0o7QUFDSjtBQUNBLFNBQVNLO0lBQ0wsSUFBSUwseUJBQXlCLE1BQU07UUFDL0IsSUFBSSxPQUFPTSxhQUFhLGFBQWE7WUFDakNOLHVCQUF1QjtZQUN2QixPQUFPQTtRQUNYO1FBQ0EsSUFBSU8sT0FBT0QsU0FBU0MsSUFBSTtRQUN4QixJQUFJQyxNQUFNRixTQUFTRyxhQUFhLENBQUM7UUFDakNELElBQUlFLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDO1FBQ2xCSixLQUFLSyxXQUFXLENBQUNKO1FB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QUFXO1FBQ1gxTyxZQUFZO1lBQ1J1QixXQUFXO1lBQ1hrSSxnQkFBZ0I7WUFDaEJFLFFBQVE7WUFDUkMsTUFBTTtZQUNOTCxTQUFTO1lBQ1RPLGFBQWE7WUFDYnRGLFdBQVc7WUFDWEQsT0FBTztZQUNQNUMsNkJBQTZCO1lBQzdCQyxzQkFBc0I7WUFDdEJxSSxTQUFTO1lBQ1RGLFlBQVk7WUFDWkMsVUFBVTtZQUNWbUQsT0FBTztZQUNQaEcsVUFBVTtZQUNWdEUsV0FBVztZQUNYbUssWUFBWTtZQUNaeEosY0FBYztRQUNsQjtRQUNBZ0csZ0JBQWdCO1FBQ2hCRSxhQUFhO1FBQ2JyRyxVQUFVO0lBQ2Q7SUFDQTs7S0FFQyxHQUNEekMsY0FBY0osVUFBVSxHQUFHQTtJQUMzQkksY0FBY1QsT0FBTyxHQUFHQTtJQUN4QixPQUFPUztBQUNYO0FBRW9DLENBQ3BDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL0B6b25lLWtpdC9uZXh0LXRzLy4vbm9kZV9tb2R1bGVzL3NpbXBsZWJhci1jb3JlL2Rpc3QvaW5kZXgubWpzPzUzODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzaW1wbGViYXItY29yZSAtIHYxLjIuNFxuICogU2Nyb2xsYmFycywgc2ltcGxlci5cbiAqIGh0dHBzOi8vZ3JzbXRvLmdpdGh1Yi5pby9zaW1wbGViYXIvXG4gKlxuICogTWFkZSBieSBBZHJpZW4gRGVuYXQgZnJvbSBhIGZvcmsgYnkgSm9uYXRoYW4gTmljb2xcbiAqIFVuZGVyIE1JVCBMaWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgdGhyb3R0bGUsIGRlYm91bmNlIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCBjYW5Vc2VET00gZnJvbSAnY2FuLXVzZS1kb20nO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XG5cbnZhciBjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IG51bGw7XG52YXIgY2FjaGVkRGV2aWNlUGl4ZWxSYXRpbyA9IG51bGw7XG5pZiAoY2FuVXNlRE9NKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNhY2hlZERldmljZVBpeGVsUmF0aW8gIT09IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICBjYWNoZWREZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgICAgICBjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNjcm9sbGJhcldpZHRoKCkge1xuICAgIGlmIChjYWNoZWRTY3JvbGxiYXJXaWR0aCA9PT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY2FjaGVkU2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNjcm9sbGJhcldpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBib3guY2xhc3NMaXN0LmFkZCgnc2ltcGxlYmFyLWhpZGUtc2Nyb2xsYmFyJyk7XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoYm94KTtcbiAgICAgICAgdmFyIHdpZHRoID0gYm94LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0O1xuICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGJveCk7XG4gICAgICAgIGNhY2hlZFNjcm9sbGJhcldpZHRoID0gd2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWRTY3JvbGxiYXJXaWR0aDtcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFdpbmRvdyQxKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHxcbiAgICAgICAgIWVsZW1lbnQub3duZXJEb2N1bWVudCB8fFxuICAgICAgICAhZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50RG9jdW1lbnQkMShlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlIG9wdGlvbnMgZnJvbSBlbGVtZW50IGF0dHJpYnV0ZXNcbnZhciBnZXRPcHRpb25zJDEgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIGluaXRpYWxPYmogPSB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChvYmosIGZ1bmN0aW9uIChhY2MsIGF0dHJpYnV0ZSkge1xuICAgICAgICB2YXIgb3B0aW9uID0gYXR0cmlidXRlLm5hbWUubWF0Y2goL2RhdGEtc2ltcGxlYmFyLSguKykvKTtcbiAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgdmFyIGtleSA9IG9wdGlvblsxXS5yZXBsYWNlKC9cXFcrKC4pL2csIGZ1bmN0aW9uIChfLCBjaHIpIHsgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpOyB9KTtcbiAgICAgICAgICAgIHN3aXRjaCAoYXR0cmlidXRlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndHJ1ZSc6XG4gICAgICAgICAgICAgICAgICAgIGFjY1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgICAgICAgICAgICAgICBhY2Nba2V5XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICAgICAgYWNjW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBhY2Nba2V5XSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIGluaXRpYWxPYmopO1xuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmZ1bmN0aW9uIGFkZENsYXNzZXMkMShlbCwgY2xhc3Nlcykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWVsKVxuICAgICAgICByZXR1cm47XG4gICAgKF9hID0gZWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2EsIGNsYXNzZXMuc3BsaXQoJyAnKSk7XG59XG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzJDEoZWwsIGNsYXNzZXMpIHtcbiAgICBpZiAoIWVsKVxuICAgICAgICByZXR1cm47XG4gICAgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjbGFzc05hbWVzVG9RdWVyeSQxKGNsYXNzTmFtZXMpIHtcbiAgICByZXR1cm4gXCIuXCIuY29uY2F0KGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5qb2luKCcuJykpO1xufVxuXG52YXIgaGVscGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgZ2V0RWxlbWVudFdpbmRvdzogZ2V0RWxlbWVudFdpbmRvdyQxLFxuICAgIGdldEVsZW1lbnREb2N1bWVudDogZ2V0RWxlbWVudERvY3VtZW50JDEsXG4gICAgZ2V0T3B0aW9uczogZ2V0T3B0aW9ucyQxLFxuICAgIGFkZENsYXNzZXM6IGFkZENsYXNzZXMkMSxcbiAgICByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzJDEsXG4gICAgY2xhc3NOYW1lc1RvUXVlcnk6IGNsYXNzTmFtZXNUb1F1ZXJ5JDFcbn0pO1xuXG52YXIgZ2V0RWxlbWVudFdpbmRvdyA9IGdldEVsZW1lbnRXaW5kb3ckMSwgZ2V0RWxlbWVudERvY3VtZW50ID0gZ2V0RWxlbWVudERvY3VtZW50JDEsIGdldE9wdGlvbnMgPSBnZXRPcHRpb25zJDEsIGFkZENsYXNzZXMgPSBhZGRDbGFzc2VzJDEsIHJlbW92ZUNsYXNzZXMgPSByZW1vdmVDbGFzc2VzJDEsIGNsYXNzTmFtZXNUb1F1ZXJ5ID0gY2xhc3NOYW1lc1RvUXVlcnkkMTtcbnZhciBTaW1wbGVCYXJDb3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbXBsZUJhckNvcmUoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlbW92ZVByZXZlbnRDbGlja0lkID0gbnVsbDtcbiAgICAgICAgdGhpcy5taW5TY3JvbGxiYXJXaWR0aCA9IDIwO1xuICAgICAgICB0aGlzLnN0b3BTY3JvbGxEZWxheSA9IDE3NTtcbiAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzTW91c2VFbnRlcmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjcm9sbFhUaWNraW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2Nyb2xsWVRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53cmFwcGVyRWwgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IG51bGw7XG4gICAgICAgIHRoaXMub2Zmc2V0RWwgPSBudWxsO1xuICAgICAgICB0aGlzLm1hc2tFbCA9IG51bGw7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXJFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbCA9IG51bGw7XG4gICAgICAgIHRoaXMucnRsSGVscGVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbFN0eWxlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNSdGwgPSBudWxsO1xuICAgICAgICB0aGlzLm1vdXNlWCA9IDA7XG4gICAgICAgIHRoaXMubW91c2VZID0gMDtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgdGhpcy5vblN0b3BTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbiBzY3JvbGwgZXZlbnQgaGFuZGxpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25TY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KF90aGlzLmVsKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuc2Nyb2xsWFRpY2tpbmcpIHtcbiAgICAgICAgICAgICAgICBlbFdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMuc2Nyb2xsWCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsWFRpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfdGhpcy5zY3JvbGxZVGlja2luZykge1xuICAgICAgICAgICAgICAgIGVsV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy5zY3JvbGxZKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxZVGlja2luZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzZXMoX3RoaXMuZWwsIF90aGlzLmNsYXNzTmFtZXMuc2Nyb2xsaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnNob3dTY3JvbGxiYXIoJ3gnKTtcbiAgICAgICAgICAgIF90aGlzLnNob3dTY3JvbGxiYXIoJ3knKTtcbiAgICAgICAgICAgIF90aGlzLm9uU3RvcFNjcm9sbGluZygpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjcm9sbFggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wb3NpdGlvblNjcm9sbGJhcigneCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsWFRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxZID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmF4aXMueS5pc092ZXJmbG93aW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucG9zaXRpb25TY3JvbGxiYXIoJ3knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnNjcm9sbFlUaWNraW5nID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uU3RvcFNjcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoX3RoaXMuZWwsIF90aGlzLmNsYXNzTmFtZXMuc2Nyb2xsaW5nKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmF1dG9IaWRlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZVNjcm9sbGJhcigneCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVTY3JvbGxiYXIoJ3knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc01vdXNlRW50ZXJpbmcpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc2VzKF90aGlzLmVsLCBfdGhpcy5jbGFzc05hbWVzLm1vdXNlRW50ZXJlZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2hvd1Njcm9sbGJhcigneCcpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNob3dTY3JvbGxiYXIoJ3knKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc01vdXNlRW50ZXJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMub25Nb3VzZUVudGVyZWQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25Nb3VzZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKF90aGlzLmVsLCBfdGhpcy5jbGFzc05hbWVzLm1vdXNlRW50ZXJlZCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hdXRvSGlkZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVTY3JvbGxiYXIoJ3gnKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlU2Nyb2xsYmFyKCd5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5pc01vdXNlRW50ZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMubW91c2VYID0gZS5jbGllbnRYO1xuICAgICAgICAgICAgX3RoaXMubW91c2VZID0gZS5jbGllbnRZO1xuICAgICAgICAgICAgaWYgKF90aGlzLmF4aXMueC5pc092ZXJmbG93aW5nIHx8IF90aGlzLmF4aXMueC5mb3JjZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbk1vdXNlTW92ZUZvckF4aXMoJ3gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyB8fCBfdGhpcy5heGlzLnkuZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub25Nb3VzZU1vdmVGb3JBeGlzKCd5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMub25Nb3VzZU1vdmUuY2FuY2VsKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgfHwgX3RoaXMuYXhpcy54LmZvcmNlVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uTW91c2VMZWF2ZUZvckF4aXMoJ3gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyB8fCBfdGhpcy5heGlzLnkuZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub25Nb3VzZUxlYXZlRm9yQXhpcygneScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMubW91c2VYID0gLTE7XG4gICAgICAgICAgICBfdGhpcy5tb3VzZVkgPSAtMTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBSZWNhbGN1bGF0ZSBzY3JvbGxiYXJXaWR0aCBpbiBjYXNlIGl0J3MgYSB6b29tXG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxiYXJXaWR0aCA9IF90aGlzLmdldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgICAgICAgICBfdGhpcy5oaWRlTmF0aXZlU2Nyb2xsYmFyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Qb2ludGVyRXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5heGlzLngudHJhY2suZWwgfHxcbiAgICAgICAgICAgICAgICAhX3RoaXMuYXhpcy55LnRyYWNrLmVsIHx8XG4gICAgICAgICAgICAgICAgIV90aGlzLmF4aXMueC5zY3JvbGxiYXIuZWwgfHxcbiAgICAgICAgICAgICAgICAhX3RoaXMuYXhpcy55LnNjcm9sbGJhci5lbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgaXNXaXRoaW5UcmFja1hCb3VuZHMsIGlzV2l0aGluVHJhY2tZQm91bmRzO1xuICAgICAgICAgICAgX3RoaXMuYXhpcy54LnRyYWNrLnJlY3QgPSBfdGhpcy5heGlzLngudHJhY2suZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBfdGhpcy5heGlzLnkudHJhY2sucmVjdCA9IF90aGlzLmF4aXMueS50cmFjay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyB8fCBfdGhpcy5heGlzLnguZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgaXNXaXRoaW5UcmFja1hCb3VuZHMgPSBfdGhpcy5pc1dpdGhpbkJvdW5kcyhfdGhpcy5heGlzLngudHJhY2sucmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcgfHwgX3RoaXMuYXhpcy55LmZvcmNlVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGlzV2l0aGluVHJhY2tZQm91bmRzID0gX3RoaXMuaXNXaXRoaW5Cb3VuZHMoX3RoaXMuYXhpcy55LnRyYWNrLnJlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYW55IHBvaW50ZXIgZXZlbnQgaXMgY2FsbGVkIG9uIHRoZSBzY3JvbGxiYXJcbiAgICAgICAgICAgIGlmIChpc1dpdGhpblRyYWNrWEJvdW5kcyB8fCBpc1dpdGhpblRyYWNrWUJvdW5kcykge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZXZlbnQgbGVha2luZ1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJkb3duJyAmJiBlLnBvaW50ZXJUeXBlICE9PSAndG91Y2gnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1dpdGhpblRyYWNrWEJvdW5kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXhpcy54LnNjcm9sbGJhci5yZWN0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5heGlzLnguc2Nyb2xsYmFyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzV2l0aGluQm91bmRzKF90aGlzLmF4aXMueC5zY3JvbGxiYXIucmVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkRyYWdTdGFydChlLCAneCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25UcmFja0NsaWNrKGUsICd4Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzV2l0aGluVHJhY2tZQm91bmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5heGlzLnkuc2Nyb2xsYmFyLnJlY3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmF4aXMueS5zY3JvbGxiYXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNXaXRoaW5Cb3VuZHMoX3RoaXMuYXhpcy55LnNjcm9sbGJhci5yZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRHJhZ1N0YXJ0KGUsICd5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblRyYWNrQ2xpY2soZSwgJ3knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERyYWcgc2Nyb2xsYmFyIGhhbmRsZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kcmFnID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2w7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmRyYWdnZWRBeGlzIHx8ICFfdGhpcy5jb250ZW50V3JhcHBlckVsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBldmVudE9mZnNldDtcbiAgICAgICAgICAgIHZhciB0cmFjayA9IF90aGlzLmF4aXNbX3RoaXMuZHJhZ2dlZEF4aXNdLnRyYWNrO1xuICAgICAgICAgICAgdmFyIHRyYWNrU2l6ZSA9IChfYiA9IChfYSA9IHRyYWNrLnJlY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtfdGhpcy5heGlzW190aGlzLmRyYWdnZWRBeGlzXS5zaXplQXR0cl0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsYmFyID0gX3RoaXMuYXhpc1tfdGhpcy5kcmFnZ2VkQXhpc10uc2Nyb2xsYmFyO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRTaXplID0gKF9kID0gKF9jID0gX3RoaXMuY29udGVudFdyYXBwZXJFbCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jW190aGlzLmF4aXNbX3RoaXMuZHJhZ2dlZEF4aXNdLnNjcm9sbFNpemVBdHRyXSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMDtcbiAgICAgICAgICAgIHZhciBob3N0U2l6ZSA9IHBhcnNlSW50KChfZiA9IChfZSA9IF90aGlzLmVsU3R5bGVzKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VbX3RoaXMuYXhpc1tfdGhpcy5kcmFnZ2VkQXhpc10uc2l6ZUF0dHJdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnMHB4JywgMTApO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5kcmFnZ2VkQXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPZmZzZXQgPSBlLnBhZ2VZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPZmZzZXQgPSBlLnBhZ2VYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhvdyBmYXIgdGhlIHVzZXIncyBtb3VzZSBpcyBmcm9tIHRoZSB0b3AvbGVmdCBvZiB0aGUgc2Nyb2xsYmFyIChtaW51cyB0aGUgZHJhZ09mZnNldCkuXG4gICAgICAgICAgICB2YXIgZHJhZ1BvcyA9IGV2ZW50T2Zmc2V0IC1cbiAgICAgICAgICAgICAgICAoKF9oID0gKF9nID0gdHJhY2sucmVjdCkgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nW190aGlzLmF4aXNbX3RoaXMuZHJhZ2dlZEF4aXNdLm9mZnNldEF0dHJdKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAwKSAtXG4gICAgICAgICAgICAgICAgX3RoaXMuYXhpc1tfdGhpcy5kcmFnZ2VkQXhpc10uZHJhZ09mZnNldDtcbiAgICAgICAgICAgIGRyYWdQb3MgPSBfdGhpcy5kcmFnZ2VkQXhpcyA9PT0gJ3gnICYmIF90aGlzLmlzUnRsXG4gICAgICAgICAgICAgICAgPyAoKF9rID0gKF9qID0gdHJhY2sucmVjdCkgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qW190aGlzLmF4aXNbX3RoaXMuZHJhZ2dlZEF4aXNdLnNpemVBdHRyXSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogMCkgLVxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxiYXIuc2l6ZSAtXG4gICAgICAgICAgICAgICAgICAgIGRyYWdQb3NcbiAgICAgICAgICAgICAgICA6IGRyYWdQb3M7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBtb3VzZSBwb3NpdGlvbiBpbnRvIGEgcGVyY2VudGFnZSBvZiB0aGUgc2Nyb2xsYmFyIGhlaWdodC93aWR0aC5cbiAgICAgICAgICAgIHZhciBkcmFnUGVyYyA9IGRyYWdQb3MgLyAodHJhY2tTaXplIC0gc2Nyb2xsYmFyLnNpemUpO1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHRoZSBjb250ZW50IGJ5IHRoZSBzYW1lIHBlcmNlbnRhZ2UuXG4gICAgICAgICAgICB2YXIgc2Nyb2xsUG9zID0gZHJhZ1BlcmMgKiAoY29udGVudFNpemUgLSBob3N0U2l6ZSk7XG4gICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgaW5jb25zaXN0ZW5jeSBvbiBSVExcbiAgICAgICAgICAgIGlmIChfdGhpcy5kcmFnZ2VkQXhpcyA9PT0gJ3gnICYmIF90aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsUG9zID0gKChfbCA9IFNpbXBsZUJhckNvcmUuZ2V0UnRsSGVscGVycygpKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wuaXNTY3JvbGxpbmdUb05lZ2F0aXZlKVxuICAgICAgICAgICAgICAgICAgICA/IC1zY3JvbGxQb3NcbiAgICAgICAgICAgICAgICAgICAgOiBzY3JvbGxQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jb250ZW50V3JhcHBlckVsW190aGlzLmF4aXNbX3RoaXMuZHJhZ2dlZEF4aXNdLnNjcm9sbE9mZnNldEF0dHJdID1cbiAgICAgICAgICAgICAgICBzY3JvbGxQb3M7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmQgc2Nyb2xsIGhhbmRsZSBkcmFnXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRW5kRHJhZyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgZWxEb2N1bWVudCA9IGdldEVsZW1lbnREb2N1bWVudChfdGhpcy5lbCk7XG4gICAgICAgICAgICB2YXIgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KF90aGlzLmVsKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKF90aGlzLmVsLCBfdGhpcy5jbGFzc05hbWVzLmRyYWdnaW5nKTtcbiAgICAgICAgICAgIGVsRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuZHJhZywgdHJ1ZSk7XG4gICAgICAgICAgICBlbERvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5vbkVuZERyYWcsIHRydWUpO1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlUHJldmVudENsaWNrSWQgPSBlbFdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlc2UgYXN5bmNocm9ub3VzbHkgc28gd2Ugc3RpbGwgc3VwcHJlc3MgY2xpY2sgZXZlbnRzXG4gICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGVkIHNpbXVsdGFuZW91c2x5IHdpdGggbW91c2V1cC5cbiAgICAgICAgICAgICAgICBlbERvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX3RoaXMucHJldmVudENsaWNrLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBlbERvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgX3RoaXMucHJldmVudENsaWNrLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXIgdG8gaWdub3JlIGNsaWNrIGV2ZW50cyBkdXJpbmcgZHJhZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmV2ZW50Q2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBTaW1wbGVCYXJDb3JlLmRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBTaW1wbGVCYXJDb3JlLmRlZmF1bHRPcHRpb25zLmNsYXNzTmFtZXMpLCBvcHRpb25zLmNsYXNzTmFtZXMpO1xuICAgICAgICB0aGlzLmF4aXMgPSB7XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0QXR0cjogJ3Njcm9sbExlZnQnLFxuICAgICAgICAgICAgICAgIHNpemVBdHRyOiAnd2lkdGgnLFxuICAgICAgICAgICAgICAgIHNjcm9sbFNpemVBdHRyOiAnc2Nyb2xsV2lkdGgnLFxuICAgICAgICAgICAgICAgIG9mZnNldFNpemVBdHRyOiAnb2Zmc2V0V2lkdGgnLFxuICAgICAgICAgICAgICAgIG9mZnNldEF0dHI6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICBvdmVyZmxvd0F0dHI6ICdvdmVyZmxvd1gnLFxuICAgICAgICAgICAgICAgIGRyYWdPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgaXNPdmVyZmxvd2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmb3JjZVZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRyYWNrOiB7IHNpemU6IG51bGwsIGVsOiBudWxsLCByZWN0OiBudWxsLCBpc1Zpc2libGU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgc2Nyb2xsYmFyOiB7IHNpemU6IG51bGwsIGVsOiBudWxsLCByZWN0OiBudWxsLCBpc1Zpc2libGU6IGZhbHNlIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0QXR0cjogJ3Njcm9sbFRvcCcsXG4gICAgICAgICAgICAgICAgc2l6ZUF0dHI6ICdoZWlnaHQnLFxuICAgICAgICAgICAgICAgIHNjcm9sbFNpemVBdHRyOiAnc2Nyb2xsSGVpZ2h0JyxcbiAgICAgICAgICAgICAgICBvZmZzZXRTaXplQXR0cjogJ29mZnNldEhlaWdodCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0QXR0cjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dBdHRyOiAnb3ZlcmZsb3dZJyxcbiAgICAgICAgICAgICAgICBkcmFnT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIGlzT3ZlcmZsb3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgZm9yY2VWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0cmFjazogeyBzaXplOiBudWxsLCBlbDogbnVsbCwgcmVjdDogbnVsbCwgaXNWaXNpYmxlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHNjcm9sbGJhcjogeyBzaXplOiBudWxsLCBlbDogbnVsbCwgcmVjdDogbnVsbCwgaXNWaXNpYmxlOiBmYWxzZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5lbCAhPT0gJ29iamVjdCcgfHwgIXRoaXMuZWwubm9kZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFyZ3VtZW50IHBhc3NlZCB0byBTaW1wbGVCYXIgbXVzdCBiZSBhbiBIVE1MIGVsZW1lbnQgaW5zdGVhZCBvZiBcIi5jb25jYXQodGhpcy5lbCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aHJvdHRsZSh0aGlzLl9vbk1vdXNlTW92ZSwgNjQpO1xuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplID0gZGVib3VuY2UodGhpcy5fb25XaW5kb3dSZXNpemUsIDY0LCB7IGxlYWRpbmc6IHRydWUgfSk7XG4gICAgICAgIHRoaXMub25TdG9wU2Nyb2xsaW5nID0gZGVib3VuY2UodGhpcy5fb25TdG9wU2Nyb2xsaW5nLCB0aGlzLnN0b3BTY3JvbGxEZWxheSk7XG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyZWQgPSBkZWJvdW5jZSh0aGlzLl9vbk1vdXNlRW50ZXJlZCwgdGhpcy5zdG9wU2Nyb2xsRGVsYXkpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVscGVyIHRvIGZpeCBicm93c2VycyBpbmNvbnNpc3RlbmN5IG9uIFJUTDpcbiAgICAgKiAgLSBGaXJlZm94IGludmVydHMgdGhlIHNjcm9sbGJhciBpbml0aWFsIHBvc2l0aW9uXG4gICAgICogIC0gSUUxMSBpbnZlcnRzIGJvdGggc2Nyb2xsYmFyIHBvc2l0aW9uIGFuZCBzY3JvbGxpbmcgb2Zmc2V0XG4gICAgICogRGlyZWN0bHkgaW5zcGlyZWQgYnkgQEtpbmdTb3JhJ3MgT3ZlcmxheVNjcm9sbGJhcnMgaHR0cHM6Ly9naXRodWIuY29tL0tpbmdTb3JhL092ZXJsYXlTY3JvbGxiYXJzL2Jsb2IvbWFzdGVyL2pzL092ZXJsYXlTY3JvbGxiYXJzLmpzI0wxNjM0XG4gICAgICovXG4gICAgU2ltcGxlQmFyQ29yZS5nZXRSdGxIZWxwZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoU2ltcGxlQmFyQ29yZS5ydGxIZWxwZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gU2ltcGxlQmFyQ29yZS5ydGxIZWxwZXJzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkdW1teURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkdW1teURpdi5pbm5lckhUTUwgPVxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzaW1wbGViYXItZHVtbXktc2Nyb2xsYmFyLXNpemVcIj48ZGl2PjwvZGl2PjwvZGl2Pic7XG4gICAgICAgIHZhciBzY3JvbGxiYXJEdW1teUVsID0gZHVtbXlEaXYuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHZhciBkdW1teUNoaWxkID0gc2Nyb2xsYmFyRHVtbXlFbCA9PT0gbnVsbCB8fCBzY3JvbGxiYXJEdW1teUVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY3JvbGxiYXJEdW1teUVsLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBpZiAoIWR1bW15Q2hpbGQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxiYXJEdW1teUVsKTtcbiAgICAgICAgc2Nyb2xsYmFyRHVtbXlFbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgdmFyIGR1bW15Q29udGFpbmVyT2Zmc2V0ID0gU2ltcGxlQmFyQ29yZS5nZXRPZmZzZXQoc2Nyb2xsYmFyRHVtbXlFbCk7XG4gICAgICAgIHZhciBkdW1teUNoaWxkT2Zmc2V0ID0gU2ltcGxlQmFyQ29yZS5nZXRPZmZzZXQoZHVtbXlDaGlsZCk7XG4gICAgICAgIHNjcm9sbGJhckR1bW15RWwuc2Nyb2xsTGVmdCA9IC05OTk7XG4gICAgICAgIHZhciBkdW1teUNoaWxkT2Zmc2V0QWZ0ZXJTY3JvbGwgPSBTaW1wbGVCYXJDb3JlLmdldE9mZnNldChkdW1teUNoaWxkKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxiYXJEdW1teUVsKTtcbiAgICAgICAgU2ltcGxlQmFyQ29yZS5ydGxIZWxwZXJzID0ge1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lcyBpZiB0aGUgc2Nyb2xsaW5nIGlzIHJlc3BvbmRpbmcgd2l0aCBuZWdhdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIGlzU2Nyb2xsT3JpZ2luQXRaZXJvOiBkdW1teUNvbnRhaW5lck9mZnNldC5sZWZ0ICE9PSBkdW1teUNoaWxkT2Zmc2V0LmxlZnQsXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmVzIGlmIHRoZSBvcmlnaW4gc2Nyb2xsYmFyIHBvc2l0aW9uIGlzIGludmVydGVkIG9yIG5vdCAocG9zaXRpb25lZCBvbiBsZWZ0IG9yIHJpZ2h0KVxuICAgICAgICAgICAgaXNTY3JvbGxpbmdUb05lZ2F0aXZlOiBkdW1teUNoaWxkT2Zmc2V0LmxlZnQgIT09IGR1bW15Q2hpbGRPZmZzZXRBZnRlclNjcm9sbC5sZWZ0XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTaW1wbGVCYXJDb3JlLnJ0bEhlbHBlcnM7XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJ5L2NhdGNoIGZvciBGRiA1NiB0aHJvd2luZyBvbiB1bmRlZmluZWQgY29tcHV0ZWRTdHlsZXNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIERldGVjdCBicm93c2VycyBzdXBwb3J0aW5nIENTUyBzY3JvbGxiYXIgc3R5bGluZyBhbmQgZG8gbm90IGNhbGN1bGF0ZVxuICAgICAgICAgICAgaWYgKCh0aGlzLmNvbnRlbnRXcmFwcGVyRWwgJiZcbiAgICAgICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGVudFdyYXBwZXJFbCwgJzo6LXdlYmtpdC1zY3JvbGxiYXInKVxuICAgICAgICAgICAgICAgICAgICAuZGlzcGxheSA9PT0gJ25vbmUnKSB8fFxuICAgICAgICAgICAgICAgICdzY3JvbGxiYXJXaWR0aCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlIHx8XG4gICAgICAgICAgICAgICAgJy1tcy1vdmVyZmxvdy1zdHlsZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbXBsZUJhckNvcmUuZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBlbERvY3VtZW50ID0gZ2V0RWxlbWVudERvY3VtZW50KGVsKTtcbiAgICAgICAgdmFyIGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyhlbCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICtcbiAgICAgICAgICAgICAgICAoZWxXaW5kb3cucGFnZVlPZmZzZXQgfHwgZWxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxcbiAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCArXG4gICAgICAgICAgICAgICAgKGVsV2luZG93LnBhZ2VYT2Zmc2V0IHx8IGVsRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSBzdG9wIGhlcmUgb24gc2VydmVyLXNpZGVcbiAgICAgICAgaWYgKGNhblVzZURPTSkge1xuICAgICAgICAgICAgdGhpcy5pbml0RE9NKCk7XG4gICAgICAgICAgICB0aGlzLnJ0bEhlbHBlcnMgPSBTaW1wbGVCYXJDb3JlLmdldFJ0bEhlbHBlcnMoKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLmdldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2ltcGxlQmFyQ29yZS5wcm90b3R5cGUuaW5pdERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLy8gYXNzdW1lIHRoYXQgZWxlbWVudCBoYXMgaGlzIERPTSBhbHJlYWR5IGluaXRpYXRlZFxuICAgICAgICB0aGlzLndyYXBwZXJFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihjbGFzc05hbWVzVG9RdWVyeSh0aGlzLmNsYXNzTmFtZXMud3JhcHBlcikpO1xuICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwgPVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNjcm9sbGFibGVOb2RlIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy5jb250ZW50V3JhcHBlcikpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY29udGVudE5vZGUgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lc1RvUXVlcnkodGhpcy5jbGFzc05hbWVzLmNvbnRlbnRFbCkpO1xuICAgICAgICB0aGlzLm9mZnNldEVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy5vZmZzZXQpKTtcbiAgICAgICAgdGhpcy5tYXNrRWwgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lc1RvUXVlcnkodGhpcy5jbGFzc05hbWVzLm1hc2spKTtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlckVsID0gdGhpcy5maW5kQ2hpbGQodGhpcy53cmFwcGVyRWwsIGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy5wbGFjZWhvbGRlcikpO1xuICAgICAgICB0aGlzLmhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihjbGFzc05hbWVzVG9RdWVyeSh0aGlzLmNsYXNzTmFtZXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsKSk7XG4gICAgICAgIHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyRWwgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lc1RvUXVlcnkodGhpcy5jbGFzc05hbWVzLmhlaWdodEF1dG9PYnNlcnZlckVsKSk7XG4gICAgICAgIHRoaXMuYXhpcy54LnRyYWNrLmVsID0gdGhpcy5maW5kQ2hpbGQodGhpcy5lbCwgXCJcIi5jb25jYXQoY2xhc3NOYW1lc1RvUXVlcnkodGhpcy5jbGFzc05hbWVzLnRyYWNrKSkuY29uY2F0KGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy5ob3Jpem9udGFsKSkpO1xuICAgICAgICB0aGlzLmF4aXMueS50cmFjay5lbCA9IHRoaXMuZmluZENoaWxkKHRoaXMuZWwsIFwiXCIuY29uY2F0KGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy50cmFjaykpLmNvbmNhdChjbGFzc05hbWVzVG9RdWVyeSh0aGlzLmNsYXNzTmFtZXMudmVydGljYWwpKSk7XG4gICAgICAgIHRoaXMuYXhpcy54LnNjcm9sbGJhci5lbCA9XG4gICAgICAgICAgICAoKF9hID0gdGhpcy5heGlzLngudHJhY2suZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5xdWVyeVNlbGVjdG9yKGNsYXNzTmFtZXNUb1F1ZXJ5KHRoaXMuY2xhc3NOYW1lcy5zY3JvbGxiYXIpKSkgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsID1cbiAgICAgICAgICAgICgoX2IgPSB0aGlzLmF4aXMueS50cmFjay5lbCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lc1RvUXVlcnkodGhpcy5jbGFzc05hbWVzLnNjcm9sbGJhcikpKSB8fCBudWxsO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5hdXRvSGlkZSkge1xuICAgICAgICAgICAgYWRkQ2xhc3Nlcyh0aGlzLmF4aXMueC5zY3JvbGxiYXIuZWwsIHRoaXMuY2xhc3NOYW1lcy52aXNpYmxlKTtcbiAgICAgICAgICAgIGFkZENsYXNzZXModGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsLCB0aGlzLmNsYXNzTmFtZXMudmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLmluaXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyh0aGlzLmVsKTtcbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMub25Nb3VzZUVudGVyKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMub25Qb2ludGVyRXZlbnQsIHRydWUpO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZSk7XG4gICAgICAgIChfYSA9IHRoaXMuY29udGVudFdyYXBwZXJFbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuICAgICAgICAvLyBCcm93c2VyIHpvb20gdHJpZ2dlcnMgYSB3aW5kb3cgcmVzaXplXG4gICAgICAgIGVsV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUpO1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAod2luZG93LlJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgICAgICAvLyBIYWNrIGZvciBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9SZXNpemVPYnNlcnZlci9pc3N1ZXMvMzhcbiAgICAgICAgICAgIHZhciByZXNpemVPYnNlcnZlclN0YXJ0ZWRfMSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHJlc2l6ZU9ic2VydmVyID0gZWxXaW5kb3cuUmVzaXplT2JzZXJ2ZXIgfHwgUmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IHJlc2l6ZU9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc2l6ZU9ic2VydmVyU3RhcnRlZF8xKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZWxXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjYWxjdWxhdGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuY29udGVudEVsKTtcbiAgICAgICAgICAgIGVsV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzaXplT2JzZXJ2ZXJTdGFydGVkXzEgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCB0byBkZXRlY3QgaG9yaXpvbnRhbCBzY3JvbGwuIFZlcnRpY2FsIHNjcm9sbCBvbmx5IG5lZWRzIHRoZSByZXNpemVPYnNlcnZlci5cbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbmV3IGVsV2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxXaW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWNhbGN1bGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnRFbCwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5yZWNhbGN1bGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsIHx8XG4gICAgICAgICAgICAhdGhpcy5jb250ZW50RWwgfHxcbiAgICAgICAgICAgICF0aGlzLmNvbnRlbnRXcmFwcGVyRWwgfHxcbiAgICAgICAgICAgICF0aGlzLndyYXBwZXJFbCB8fFxuICAgICAgICAgICAgIXRoaXMucGxhY2Vob2xkZXJFbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5lbFN0eWxlcyA9IGVsV2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCk7XG4gICAgICAgIHRoaXMuaXNSdGwgPSB0aGlzLmVsU3R5bGVzLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgICAgIHZhciBjb250ZW50RWxPZmZzZXRXaWR0aCA9IHRoaXMuY29udGVudEVsLm9mZnNldFdpZHRoO1xuICAgICAgICB2YXIgaXNIZWlnaHRBdXRvID0gdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbC5vZmZzZXRIZWlnaHQgPD0gMTtcbiAgICAgICAgdmFyIGlzV2lkdGhBdXRvID0gdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbC5vZmZzZXRXaWR0aCA8PSAxIHx8IGNvbnRlbnRFbE9mZnNldFdpZHRoID4gMDtcbiAgICAgICAgdmFyIGNvbnRlbnRXcmFwcGVyRWxPZmZzZXRXaWR0aCA9IHRoaXMuY29udGVudFdyYXBwZXJFbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIGVsT3ZlcmZsb3dYID0gdGhpcy5lbFN0eWxlcy5vdmVyZmxvd1g7XG4gICAgICAgIHZhciBlbE92ZXJmbG93WSA9IHRoaXMuZWxTdHlsZXMub3ZlcmZsb3dZO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5zdHlsZS5wYWRkaW5nID0gXCJcIi5jb25jYXQodGhpcy5lbFN0eWxlcy5wYWRkaW5nVG9wLCBcIiBcIikuY29uY2F0KHRoaXMuZWxTdHlsZXMucGFkZGluZ1JpZ2h0LCBcIiBcIikuY29uY2F0KHRoaXMuZWxTdHlsZXMucGFkZGluZ0JvdHRvbSwgXCIgXCIpLmNvbmNhdCh0aGlzLmVsU3R5bGVzLnBhZGRpbmdMZWZ0KTtcbiAgICAgICAgdGhpcy53cmFwcGVyRWwuc3R5bGUubWFyZ2luID0gXCItXCIuY29uY2F0KHRoaXMuZWxTdHlsZXMucGFkZGluZ1RvcCwgXCIgLVwiKS5jb25jYXQodGhpcy5lbFN0eWxlcy5wYWRkaW5nUmlnaHQsIFwiIC1cIikuY29uY2F0KHRoaXMuZWxTdHlsZXMucGFkZGluZ0JvdHRvbSwgXCIgLVwiKS5jb25jYXQodGhpcy5lbFN0eWxlcy5wYWRkaW5nTGVmdCk7XG4gICAgICAgIHZhciBjb250ZW50RWxTY3JvbGxIZWlnaHQgPSB0aGlzLmNvbnRlbnRFbC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIHZhciBjb250ZW50RWxTY3JvbGxXaWR0aCA9IHRoaXMuY29udGVudEVsLnNjcm9sbFdpZHRoO1xuICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gaXNIZWlnaHRBdXRvID8gJ2F1dG8nIDogJzEwMCUnO1xuICAgICAgICAvLyBEZXRlcm1pbmUgcGxhY2Vob2xkZXIgc2l6ZVxuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyRWwuc3R5bGUud2lkdGggPSBpc1dpZHRoQXV0b1xuICAgICAgICAgICAgPyBcIlwiLmNvbmNhdChjb250ZW50RWxPZmZzZXRXaWR0aCB8fCBjb250ZW50RWxTY3JvbGxXaWR0aCwgXCJweFwiKVxuICAgICAgICAgICAgOiAnYXV0byc7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXJFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChjb250ZW50RWxTY3JvbGxIZWlnaHQsIFwicHhcIik7XG4gICAgICAgIHZhciBjb250ZW50V3JhcHBlckVsT2Zmc2V0SGVpZ2h0ID0gdGhpcy5jb250ZW50V3JhcHBlckVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyA9XG4gICAgICAgICAgICBjb250ZW50RWxPZmZzZXRXaWR0aCAhPT0gMCAmJiBjb250ZW50RWxTY3JvbGxXaWR0aCA+IGNvbnRlbnRFbE9mZnNldFdpZHRoO1xuICAgICAgICB0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nID1cbiAgICAgICAgICAgIGNvbnRlbnRFbFNjcm9sbEhlaWdodCA+IGNvbnRlbnRXcmFwcGVyRWxPZmZzZXRIZWlnaHQ7XG4gICAgICAgIC8vIFNldCBpc092ZXJmbG93aW5nIHRvIGZhbHNlIGlmIHVzZXIgZXhwbGljaXRlbHkgc2V0IGhpZGRlbiBvdmVyZmxvd1xuICAgICAgICB0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nID1cbiAgICAgICAgICAgIGVsT3ZlcmZsb3dYID09PSAnaGlkZGVuJyA/IGZhbHNlIDogdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZztcbiAgICAgICAgdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZyA9XG4gICAgICAgICAgICBlbE92ZXJmbG93WSA9PT0gJ2hpZGRlbicgPyBmYWxzZSA6IHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmc7XG4gICAgICAgIHRoaXMuYXhpcy54LmZvcmNlVmlzaWJsZSA9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yY2VWaXNpYmxlID09PSAneCcgfHwgdGhpcy5vcHRpb25zLmZvcmNlVmlzaWJsZSA9PT0gdHJ1ZTtcbiAgICAgICAgdGhpcy5heGlzLnkuZm9yY2VWaXNpYmxlID1cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb3JjZVZpc2libGUgPT09ICd5JyB8fCB0aGlzLm9wdGlvbnMuZm9yY2VWaXNpYmxlID09PSB0cnVlO1xuICAgICAgICB0aGlzLmhpZGVOYXRpdmVTY3JvbGxiYXIoKTtcbiAgICAgICAgLy8gU2V0IGlzT3ZlcmZsb3dpbmcgdG8gZmFsc2UgaWYgc2Nyb2xsYmFyIGlzIG5vdCBuZWNlc3NhcnkgKGNvbnRlbnQgaXMgc2hvcnRlciB0aGFuIG9mZnNldClcbiAgICAgICAgdmFyIG9mZnNldEZvclhTY3JvbGxiYXIgPSB0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nXG4gICAgICAgICAgICA/IHRoaXMuc2Nyb2xsYmFyV2lkdGhcbiAgICAgICAgICAgIDogMDtcbiAgICAgICAgdmFyIG9mZnNldEZvcllTY3JvbGxiYXIgPSB0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nXG4gICAgICAgICAgICA/IHRoaXMuc2Nyb2xsYmFyV2lkdGhcbiAgICAgICAgICAgIDogMDtcbiAgICAgICAgdGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyA9XG4gICAgICAgICAgICB0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nICYmXG4gICAgICAgICAgICAgICAgY29udGVudEVsU2Nyb2xsV2lkdGggPiBjb250ZW50V3JhcHBlckVsT2Zmc2V0V2lkdGggLSBvZmZzZXRGb3JZU2Nyb2xsYmFyO1xuICAgICAgICB0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nID1cbiAgICAgICAgICAgIHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcgJiZcbiAgICAgICAgICAgICAgICBjb250ZW50RWxTY3JvbGxIZWlnaHQgPlxuICAgICAgICAgICAgICAgICAgICBjb250ZW50V3JhcHBlckVsT2Zmc2V0SGVpZ2h0IC0gb2Zmc2V0Rm9yWFNjcm9sbGJhcjtcbiAgICAgICAgdGhpcy5heGlzLnguc2Nyb2xsYmFyLnNpemUgPSB0aGlzLmdldFNjcm9sbGJhclNpemUoJ3gnKTtcbiAgICAgICAgdGhpcy5heGlzLnkuc2Nyb2xsYmFyLnNpemUgPSB0aGlzLmdldFNjcm9sbGJhclNpemUoJ3knKTtcbiAgICAgICAgaWYgKHRoaXMuYXhpcy54LnNjcm9sbGJhci5lbClcbiAgICAgICAgICAgIHRoaXMuYXhpcy54LnNjcm9sbGJhci5lbC5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KHRoaXMuYXhpcy54LnNjcm9sbGJhci5zaXplLCBcInB4XCIpO1xuICAgICAgICBpZiAodGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsKVxuICAgICAgICAgICAgdGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHRoaXMuYXhpcy55LnNjcm9sbGJhci5zaXplLCBcInB4XCIpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uU2Nyb2xsYmFyKCd4Jyk7XG4gICAgICAgIHRoaXMucG9zaXRpb25TY3JvbGxiYXIoJ3knKTtcbiAgICAgICAgdGhpcy50b2dnbGVUcmFja1Zpc2liaWxpdHkoJ3gnKTtcbiAgICAgICAgdGhpcy50b2dnbGVUcmFja1Zpc2liaWxpdHkoJ3knKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBzY3JvbGxiYXIgc2l6ZVxuICAgICAqL1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLmdldFNjcm9sbGJhclNpemUgPSBmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7IGF4aXMgPSAneSc7IH1cbiAgICAgICAgaWYgKCF0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZyB8fCAhdGhpcy5jb250ZW50RWwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZW50U2l6ZSA9IHRoaXMuY29udGVudEVsW3RoaXMuYXhpc1theGlzXS5zY3JvbGxTaXplQXR0cl07XG4gICAgICAgIHZhciB0cmFja1NpemUgPSAoX2IgPSAoX2EgPSB0aGlzLmF4aXNbYXhpc10udHJhY2suZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVt0aGlzLmF4aXNbYXhpc10ub2Zmc2V0U2l6ZUF0dHJdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyUmF0aW8gPSB0cmFja1NpemUgLyBjb250ZW50U2l6ZTtcbiAgICAgICAgdmFyIHNjcm9sbGJhclNpemU7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBuZXcgaGVpZ2h0L3Bvc2l0aW9uIG9mIGRyYWcgaGFuZGxlLlxuICAgICAgICBzY3JvbGxiYXJTaXplID0gTWF0aC5tYXgofn4oc2Nyb2xsYmFyUmF0aW8gKiB0cmFja1NpemUpLCB0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWluU2l6ZSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWF4U2l6ZSkge1xuICAgICAgICAgICAgc2Nyb2xsYmFyU2l6ZSA9IE1hdGgubWluKHNjcm9sbGJhclNpemUsIHRoaXMub3B0aW9ucy5zY3JvbGxiYXJNYXhTaXplKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyU2l6ZTtcbiAgICB9O1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLnBvc2l0aW9uU2Nyb2xsYmFyID0gZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmIChheGlzID09PSB2b2lkIDApIHsgYXhpcyA9ICd5JzsgfVxuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhcjtcbiAgICAgICAgaWYgKCF0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZyB8fFxuICAgICAgICAgICAgIXRoaXMuY29udGVudFdyYXBwZXJFbCB8fFxuICAgICAgICAgICAgIXNjcm9sbGJhci5lbCB8fFxuICAgICAgICAgICAgIXRoaXMuZWxTdHlsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudFNpemUgPSB0aGlzLmNvbnRlbnRXcmFwcGVyRWxbdGhpcy5heGlzW2F4aXNdLnNjcm9sbFNpemVBdHRyXTtcbiAgICAgICAgdmFyIHRyYWNrU2l6ZSA9ICgoX2EgPSB0aGlzLmF4aXNbYXhpc10udHJhY2suZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVt0aGlzLmF4aXNbYXhpc10ub2Zmc2V0U2l6ZUF0dHJdKSB8fCAwO1xuICAgICAgICB2YXIgaG9zdFNpemUgPSBwYXJzZUludCh0aGlzLmVsU3R5bGVzW3RoaXMuYXhpc1theGlzXS5zaXplQXR0cl0sIDEwKTtcbiAgICAgICAgdmFyIHNjcm9sbE9mZnNldCA9IHRoaXMuY29udGVudFdyYXBwZXJFbFt0aGlzLmF4aXNbYXhpc10uc2Nyb2xsT2Zmc2V0QXR0cl07XG4gICAgICAgIHNjcm9sbE9mZnNldCA9XG4gICAgICAgICAgICBheGlzID09PSAneCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnRsICYmXG4gICAgICAgICAgICAgICAgKChfYiA9IFNpbXBsZUJhckNvcmUuZ2V0UnRsSGVscGVycygpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaXNTY3JvbGxPcmlnaW5BdFplcm8pXG4gICAgICAgICAgICAgICAgPyAtc2Nyb2xsT2Zmc2V0XG4gICAgICAgICAgICAgICAgOiBzY3JvbGxPZmZzZXQ7XG4gICAgICAgIGlmIChheGlzID09PSAneCcgJiYgdGhpcy5pc1J0bCkge1xuICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0ID0gKChfYyA9IFNpbXBsZUJhckNvcmUuZ2V0UnRsSGVscGVycygpKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaXNTY3JvbGxpbmdUb05lZ2F0aXZlKVxuICAgICAgICAgICAgICAgID8gc2Nyb2xsT2Zmc2V0XG4gICAgICAgICAgICAgICAgOiAtc2Nyb2xsT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY3JvbGxQb3VyY2VudCA9IHNjcm9sbE9mZnNldCAvIChjb250ZW50U2l6ZSAtIGhvc3RTaXplKTtcbiAgICAgICAgdmFyIGhhbmRsZU9mZnNldCA9IH5+KCh0cmFja1NpemUgLSBzY3JvbGxiYXIuc2l6ZSkgKiBzY3JvbGxQb3VyY2VudCk7XG4gICAgICAgIGhhbmRsZU9mZnNldCA9XG4gICAgICAgICAgICBheGlzID09PSAneCcgJiYgdGhpcy5pc1J0bFxuICAgICAgICAgICAgICAgID8gLWhhbmRsZU9mZnNldCArICh0cmFja1NpemUgLSBzY3JvbGxiYXIuc2l6ZSlcbiAgICAgICAgICAgICAgICA6IGhhbmRsZU9mZnNldDtcbiAgICAgICAgc2Nyb2xsYmFyLmVsLnN0eWxlLnRyYW5zZm9ybSA9XG4gICAgICAgICAgICBheGlzID09PSAneCdcbiAgICAgICAgICAgICAgICA/IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KGhhbmRsZU9mZnNldCwgXCJweCwgMCwgMClcIilcbiAgICAgICAgICAgICAgICA6IFwidHJhbnNsYXRlM2QoMCwgXCIuY29uY2F0KGhhbmRsZU9mZnNldCwgXCJweCwgMClcIik7XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS50b2dnbGVUcmFja1Zpc2liaWxpdHkgPSBmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7IGF4aXMgPSAneSc7IH1cbiAgICAgICAgdmFyIHRyYWNrID0gdGhpcy5heGlzW2F4aXNdLnRyYWNrLmVsO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5lbDtcbiAgICAgICAgaWYgKCF0cmFjayB8fCAhc2Nyb2xsYmFyIHx8ICF0aGlzLmNvbnRlbnRXcmFwcGVyRWwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZyB8fCB0aGlzLmF4aXNbYXhpc10uZm9yY2VWaXNpYmxlKSB7XG4gICAgICAgICAgICB0cmFjay5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsLnN0eWxlW3RoaXMuYXhpc1theGlzXS5vdmVyZmxvd0F0dHJdID0gJ3Njcm9sbCc7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQodGhpcy5jbGFzc05hbWVzLnNjcm9sbGFibGUsIFwiLVwiKS5jb25jYXQoYXhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2suc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsLnN0eWxlW3RoaXMuYXhpc1theGlzXS5vdmVyZmxvd0F0dHJdID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoXCJcIi5jb25jYXQodGhpcy5jbGFzc05hbWVzLnNjcm9sbGFibGUsIFwiLVwiKS5jb25jYXQoYXhpcykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV2ZW4gaWYgZm9yY2VWaXNpYmxlIGlzIGVuYWJsZWQsIHNjcm9sbGJhciBpdHNlbGYgc2hvdWxkIGJlIGhpZGRlblxuICAgICAgICBpZiAodGhpcy5heGlzW2F4aXNdLmlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICAgIHNjcm9sbGJhci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNjcm9sbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5zaG93U2Nyb2xsYmFyID0gZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgaWYgKGF4aXMgPT09IHZvaWQgMCkgeyBheGlzID0gJ3knOyB9XG4gICAgICAgIGlmICh0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZyAmJiAhdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXModGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5lbCwgdGhpcy5jbGFzc05hbWVzLnZpc2libGUpO1xuICAgICAgICAgICAgdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5oaWRlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgaWYgKGF4aXMgPT09IHZvaWQgMCkgeyBheGlzID0gJ3knOyB9XG4gICAgICAgIGlmICh0aGlzLmF4aXNbYXhpc10uaXNPdmVyZmxvd2luZyAmJiB0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLmVsLCB0aGlzLmNsYXNzTmFtZXMudmlzaWJsZSk7XG4gICAgICAgICAgICB0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5oaWRlTmF0aXZlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMub2Zmc2V0RWwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMub2Zmc2V0RWwuc3R5bGVbdGhpcy5pc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCddID1cbiAgICAgICAgICAgIHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcgfHwgdGhpcy5heGlzLnkuZm9yY2VWaXNpYmxlXG4gICAgICAgICAgICAgICAgPyBcIi1cIi5jb25jYXQodGhpcy5zY3JvbGxiYXJXaWR0aCwgXCJweFwiKVxuICAgICAgICAgICAgICAgIDogJzBweCc7XG4gICAgICAgIHRoaXMub2Zmc2V0RWwuc3R5bGUuYm90dG9tID1cbiAgICAgICAgICAgIHRoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmcgfHwgdGhpcy5heGlzLnguZm9yY2VWaXNpYmxlXG4gICAgICAgICAgICAgICAgPyBcIi1cIi5jb25jYXQodGhpcy5zY3JvbGxiYXJXaWR0aCwgXCJweFwiKVxuICAgICAgICAgICAgICAgIDogJzBweCc7XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5vbk1vdXNlTW92ZUZvckF4aXMgPSBmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7IGF4aXMgPSAneSc7IH1cbiAgICAgICAgdmFyIGN1cnJlbnRBeGlzID0gdGhpcy5heGlzW2F4aXNdO1xuICAgICAgICBpZiAoIWN1cnJlbnRBeGlzLnRyYWNrLmVsIHx8ICFjdXJyZW50QXhpcy5zY3JvbGxiYXIuZWwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGN1cnJlbnRBeGlzLnRyYWNrLnJlY3QgPSBjdXJyZW50QXhpcy50cmFjay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY3VycmVudEF4aXMuc2Nyb2xsYmFyLnJlY3QgPVxuICAgICAgICAgICAgY3VycmVudEF4aXMuc2Nyb2xsYmFyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAodGhpcy5pc1dpdGhpbkJvdW5kcyhjdXJyZW50QXhpcy50cmFjay5yZWN0KSkge1xuICAgICAgICAgICAgdGhpcy5zaG93U2Nyb2xsYmFyKGF4aXMpO1xuICAgICAgICAgICAgYWRkQ2xhc3NlcyhjdXJyZW50QXhpcy50cmFjay5lbCwgdGhpcy5jbGFzc05hbWVzLmhvdmVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzV2l0aGluQm91bmRzKGN1cnJlbnRBeGlzLnNjcm9sbGJhci5yZWN0KSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzZXMoY3VycmVudEF4aXMuc2Nyb2xsYmFyLmVsLCB0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjdXJyZW50QXhpcy5zY3JvbGxiYXIuZWwsIHRoaXMuY2xhc3NOYW1lcy5ob3Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKGN1cnJlbnRBeGlzLnRyYWNrLmVsLCB0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvSGlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVNjcm9sbGJhcihheGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2ltcGxlQmFyQ29yZS5wcm90b3R5cGUub25Nb3VzZUxlYXZlRm9yQXhpcyA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIGlmIChheGlzID09PSB2b2lkIDApIHsgYXhpcyA9ICd5JzsgfVxuICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuYXhpc1theGlzXS50cmFjay5lbCwgdGhpcy5jbGFzc05hbWVzLmhvdmVyKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3Nlcyh0aGlzLmF4aXNbYXhpc10uc2Nyb2xsYmFyLmVsLCB0aGlzLmNsYXNzTmFtZXMuaG92ZXIpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IaWRlKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVTY3JvbGxiYXIoYXhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIG9uIHNjcm9sbGJhciBoYW5kbGUgZHJhZyBtb3ZlbWVudCBzdGFydHNcbiAgICAgKi9cbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5vbkRyYWdTdGFydCA9IGZ1bmN0aW9uIChlLCBheGlzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGF4aXMgPT09IHZvaWQgMCkgeyBheGlzID0gJ3knOyB9XG4gICAgICAgIHZhciBlbERvY3VtZW50ID0gZ2V0RWxlbWVudERvY3VtZW50KHRoaXMuZWwpO1xuICAgICAgICB2YXIgZWxXaW5kb3cgPSBnZXRFbGVtZW50V2luZG93KHRoaXMuZWwpO1xuICAgICAgICB2YXIgc2Nyb2xsYmFyID0gdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhcjtcbiAgICAgICAgLy8gTWVhc3VyZSBob3cgZmFyIHRoZSB1c2VyJ3MgbW91c2UgaXMgZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JvbGxiYXIgZHJhZyBoYW5kbGUuXG4gICAgICAgIHZhciBldmVudE9mZnNldCA9IGF4aXMgPT09ICd5JyA/IGUucGFnZVkgOiBlLnBhZ2VYO1xuICAgICAgICB0aGlzLmF4aXNbYXhpc10uZHJhZ09mZnNldCA9XG4gICAgICAgICAgICBldmVudE9mZnNldCAtICgoKF9hID0gc2Nyb2xsYmFyLnJlY3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVt0aGlzLmF4aXNbYXhpc10ub2Zmc2V0QXR0cl0pIHx8IDApO1xuICAgICAgICB0aGlzLmRyYWdnZWRBeGlzID0gYXhpcztcbiAgICAgICAgYWRkQ2xhc3Nlcyh0aGlzLmVsLCB0aGlzLmNsYXNzTmFtZXMuZHJhZ2dpbmcpO1xuICAgICAgICBlbERvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuZHJhZywgdHJ1ZSk7XG4gICAgICAgIGVsRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25FbmREcmFnLCB0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVsRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnByZXZlbnRDbGljaywgdHJ1ZSk7XG4gICAgICAgICAgICBlbERvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5wcmV2ZW50Q2xpY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxXaW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLm9uVHJhY2tDbGljayA9IGZ1bmN0aW9uIChlLCBheGlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgaWYgKGF4aXMgPT09IHZvaWQgMCkgeyBheGlzID0gJ3knOyB9XG4gICAgICAgIHZhciBjdXJyZW50QXhpcyA9IHRoaXMuYXhpc1theGlzXTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuY2xpY2tPblRyYWNrIHx8XG4gICAgICAgICAgICAhY3VycmVudEF4aXMuc2Nyb2xsYmFyLmVsIHx8XG4gICAgICAgICAgICAhdGhpcy5jb250ZW50V3JhcHBlckVsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBQcmV2ZW50aW5nIHRoZSBldmVudCdzIGRlZmF1bHQgdG8gdHJpZ2dlciBjbGljayB1bmRlcm5lYXRoXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGVsV2luZG93ID0gZ2V0RWxlbWVudFdpbmRvdyh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5heGlzW2F4aXNdLnNjcm9sbGJhci5yZWN0ID1cbiAgICAgICAgICAgIGN1cnJlbnRBeGlzLnNjcm9sbGJhci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIHNjcm9sbGJhciA9IHRoaXMuYXhpc1theGlzXS5zY3JvbGxiYXI7XG4gICAgICAgIHZhciBzY3JvbGxiYXJPZmZzZXQgPSAoX2IgPSAoX2EgPSBzY3JvbGxiYXIucmVjdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW3RoaXMuYXhpc1theGlzXS5vZmZzZXRBdHRyXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbiAgICAgICAgdmFyIGhvc3RTaXplID0gcGFyc2VJbnQoKF9kID0gKF9jID0gdGhpcy5lbFN0eWxlcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jW3RoaXMuYXhpc1theGlzXS5zaXplQXR0cl0pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcwcHgnLCAxMCk7XG4gICAgICAgIHZhciBzY3JvbGxlZCA9IHRoaXMuY29udGVudFdyYXBwZXJFbFt0aGlzLmF4aXNbYXhpc10uc2Nyb2xsT2Zmc2V0QXR0cl07XG4gICAgICAgIHZhciB0ID0gYXhpcyA9PT0gJ3knXG4gICAgICAgICAgICA/IHRoaXMubW91c2VZIC0gc2Nyb2xsYmFyT2Zmc2V0XG4gICAgICAgICAgICA6IHRoaXMubW91c2VYIC0gc2Nyb2xsYmFyT2Zmc2V0O1xuICAgICAgICB2YXIgZGlyID0gdCA8IDAgPyAtMSA6IDE7XG4gICAgICAgIHZhciBzY3JvbGxTaXplID0gZGlyID09PSAtMSA/IHNjcm9sbGVkIC0gaG9zdFNpemUgOiBzY3JvbGxlZCArIGhvc3RTaXplO1xuICAgICAgICB2YXIgc3BlZWQgPSA0MDtcbiAgICAgICAgdmFyIHNjcm9sbFRvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5jb250ZW50V3JhcHBlckVsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmIChkaXIgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVkID4gc2Nyb2xsU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxlZCAtPSBzcGVlZDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGVudFdyYXBwZXJFbFtfdGhpcy5heGlzW2F4aXNdLnNjcm9sbE9mZnNldEF0dHJdID0gc2Nyb2xsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGVsV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY3JvbGxUbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVkIDwgc2Nyb2xsU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxlZCArPSBzcGVlZDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGVudFdyYXBwZXJFbFtfdGhpcy5heGlzW2F4aXNdLnNjcm9sbE9mZnNldEF0dHJdID0gc2Nyb2xsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGVsV2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzY3JvbGxUbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxUbygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0dGVyIGZvciBjb250ZW50IGVsZW1lbnRcbiAgICAgKi9cbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5nZXRDb250ZW50RWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudEVsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0dGVyIGZvciBvcmlnaW5hbCBzY3JvbGxpbmcgZWxlbWVudFxuICAgICAqL1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLmdldFNjcm9sbEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRXcmFwcGVyRWw7XG4gICAgfTtcbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbFdpbmRvdyA9IGdldEVsZW1lbnRXaW5kb3codGhpcy5lbCk7XG4gICAgICAgIC8vIEV2ZW50IGxpc3RlbmVyc1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlcik7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLm9uUG9pbnRlckV2ZW50LCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmUpO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50V3JhcHBlckVsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XG4gICAgICAgIGlmICh0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbmNlbCBhbGwgZGVib3VuY2VkIGZ1bmN0aW9uc1xuICAgICAgICB0aGlzLm9uTW91c2VNb3ZlLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLm9uU3RvcFNjcm9sbGluZy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5vbk1vdXNlRW50ZXJlZC5jYW5jZWwoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzIGZyb20gRE9NIG5vZGVzXG4gICAgICovXG4gICAgU2ltcGxlQmFyQ29yZS5wcm90b3R5cGUudW5Nb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIG1vdXNlIGlzIHdpdGhpbiBib3VuZHNcbiAgICAgKi9cbiAgICBTaW1wbGVCYXJDb3JlLnByb3RvdHlwZS5pc1dpdGhpbkJvdW5kcyA9IGZ1bmN0aW9uIChiYm94KSB7XG4gICAgICAgIHJldHVybiAodGhpcy5tb3VzZVggPj0gYmJveC5sZWZ0ICYmXG4gICAgICAgICAgICB0aGlzLm1vdXNlWCA8PSBiYm94LmxlZnQgKyBiYm94LndpZHRoICYmXG4gICAgICAgICAgICB0aGlzLm1vdXNlWSA+PSBiYm94LnRvcCAmJlxuICAgICAgICAgICAgdGhpcy5tb3VzZVkgPD0gYmJveC50b3AgKyBiYm94LmhlaWdodCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5kIGVsZW1lbnQgY2hpbGRyZW4gbWF0Y2hlcyBxdWVyeVxuICAgICAqL1xuICAgIFNpbXBsZUJhckNvcmUucHJvdG90eXBlLmZpbmRDaGlsZCA9IGZ1bmN0aW9uIChlbCwgcXVlcnkpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBlbC5tYXRjaGVzIHx8XG4gICAgICAgICAgICBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgIGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgZWwubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWwuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMuY2FsbChjaGlsZCwgcXVlcnkpO1xuICAgICAgICB9KVswXTtcbiAgICB9O1xuICAgIFNpbXBsZUJhckNvcmUucnRsSGVscGVycyA9IG51bGw7XG4gICAgU2ltcGxlQmFyQ29yZS5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgZm9yY2VWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgY2xpY2tPblRyYWNrOiB0cnVlLFxuICAgICAgICBzY3JvbGxiYXJNaW5TaXplOiAyNSxcbiAgICAgICAgc2Nyb2xsYmFyTWF4U2l6ZTogMCxcbiAgICAgICAgYXJpYUxhYmVsOiAnc2Nyb2xsYWJsZSBjb250ZW50JyxcbiAgICAgICAgY2xhc3NOYW1lczoge1xuICAgICAgICAgICAgY29udGVudEVsOiAnc2ltcGxlYmFyLWNvbnRlbnQnLFxuICAgICAgICAgICAgY29udGVudFdyYXBwZXI6ICdzaW1wbGViYXItY29udGVudC13cmFwcGVyJyxcbiAgICAgICAgICAgIG9mZnNldDogJ3NpbXBsZWJhci1vZmZzZXQnLFxuICAgICAgICAgICAgbWFzazogJ3NpbXBsZWJhci1tYXNrJyxcbiAgICAgICAgICAgIHdyYXBwZXI6ICdzaW1wbGViYXItd3JhcHBlcicsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3NpbXBsZWJhci1wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICBzY3JvbGxiYXI6ICdzaW1wbGViYXItc2Nyb2xsYmFyJyxcbiAgICAgICAgICAgIHRyYWNrOiAnc2ltcGxlYmFyLXRyYWNrJyxcbiAgICAgICAgICAgIGhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbDogJ3NpbXBsZWJhci1oZWlnaHQtYXV0by1vYnNlcnZlci13cmFwcGVyJyxcbiAgICAgICAgICAgIGhlaWdodEF1dG9PYnNlcnZlckVsOiAnc2ltcGxlYmFyLWhlaWdodC1hdXRvLW9ic2VydmVyJyxcbiAgICAgICAgICAgIHZpc2libGU6ICdzaW1wbGViYXItdmlzaWJsZScsXG4gICAgICAgICAgICBob3Jpem9udGFsOiAnc2ltcGxlYmFyLWhvcml6b250YWwnLFxuICAgICAgICAgICAgdmVydGljYWw6ICdzaW1wbGViYXItdmVydGljYWwnLFxuICAgICAgICAgICAgaG92ZXI6ICdzaW1wbGViYXItaG92ZXInLFxuICAgICAgICAgICAgZHJhZ2dpbmc6ICdzaW1wbGViYXItZHJhZ2dpbmcnLFxuICAgICAgICAgICAgc2Nyb2xsaW5nOiAnc2ltcGxlYmFyLXNjcm9sbGluZycsXG4gICAgICAgICAgICBzY3JvbGxhYmxlOiAnc2ltcGxlYmFyLXNjcm9sbGFibGUnLFxuICAgICAgICAgICAgbW91c2VFbnRlcmVkOiAnc2ltcGxlYmFyLW1vdXNlLWVudGVyZWQnXG4gICAgICAgIH0sXG4gICAgICAgIHNjcm9sbGFibGVOb2RlOiBudWxsLFxuICAgICAgICBjb250ZW50Tm9kZTogbnVsbCxcbiAgICAgICAgYXV0b0hpZGU6IHRydWVcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXRpYyBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBTaW1wbGVCYXJDb3JlLmdldE9wdGlvbnMgPSBnZXRPcHRpb25zO1xuICAgIFNpbXBsZUJhckNvcmUuaGVscGVycyA9IGhlbHBlcnM7XG4gICAgcmV0dXJuIFNpbXBsZUJhckNvcmU7XG59KCkpO1xuXG5leHBvcnQgeyBTaW1wbGVCYXJDb3JlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ0aHJvdHRsZSIsImRlYm91bmNlIiwiY2FuVXNlRE9NIiwiX19hc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJ0IiwicyIsImkiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiY2FjaGVkU2Nyb2xsYmFyV2lkdGgiLCJjYWNoZWREZXZpY2VQaXhlbFJhdGlvIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRldmljZVBpeGVsUmF0aW8iLCJzY3JvbGxiYXJXaWR0aCIsImRvY3VtZW50IiwiYm9keSIsImJveCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsIndpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJyZW1vdmVDaGlsZCIsImdldEVsZW1lbnRXaW5kb3ckMSIsImVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRFbGVtZW50RG9jdW1lbnQkMSIsImdldE9wdGlvbnMkMSIsIm9iaiIsImluaXRpYWxPYmoiLCJvcHRpb25zIiwiQXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJhdHRyaWJ1dGUiLCJvcHRpb24iLCJuYW1lIiwibWF0Y2giLCJrZXkiLCJyZXBsYWNlIiwiXyIsImNociIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJhZGRDbGFzc2VzJDEiLCJlbCIsImNsYXNzZXMiLCJfYSIsInNwbGl0IiwicmVtb3ZlQ2xhc3NlcyQxIiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsInJlbW92ZSIsImNsYXNzTmFtZXNUb1F1ZXJ5JDEiLCJjbGFzc05hbWVzIiwiY29uY2F0Iiwiam9pbiIsImhlbHBlcnMiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJnZXRFbGVtZW50V2luZG93IiwiZ2V0RWxlbWVudERvY3VtZW50IiwiZ2V0T3B0aW9ucyIsImFkZENsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiY2xhc3NOYW1lc1RvUXVlcnkiLCJTaW1wbGVCYXJDb3JlIiwiX3RoaXMiLCJyZW1vdmVQcmV2ZW50Q2xpY2tJZCIsIm1pblNjcm9sbGJhcldpZHRoIiwic3RvcFNjcm9sbERlbGF5IiwiaXNTY3JvbGxpbmciLCJpc01vdXNlRW50ZXJpbmciLCJzY3JvbGxYVGlja2luZyIsInNjcm9sbFlUaWNraW5nIiwid3JhcHBlckVsIiwiY29udGVudFdyYXBwZXJFbCIsImNvbnRlbnRFbCIsIm9mZnNldEVsIiwibWFza0VsIiwicGxhY2Vob2xkZXJFbCIsImhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbCIsImhlaWdodEF1dG9PYnNlcnZlckVsIiwicnRsSGVscGVycyIsInJlc2l6ZU9ic2VydmVyIiwibXV0YXRpb25PYnNlcnZlciIsImVsU3R5bGVzIiwiaXNSdGwiLCJtb3VzZVgiLCJtb3VzZVkiLCJvbk1vdXNlTW92ZSIsIm9uV2luZG93UmVzaXplIiwib25TdG9wU2Nyb2xsaW5nIiwib25Nb3VzZUVudGVyZWQiLCJvblNjcm9sbCIsImVsV2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJzY3JvbGxpbmciLCJzaG93U2Nyb2xsYmFyIiwiYXhpcyIsIngiLCJpc092ZXJmbG93aW5nIiwicG9zaXRpb25TY3JvbGxiYXIiLCJ5IiwiX29uU3RvcFNjcm9sbGluZyIsImF1dG9IaWRlIiwiaGlkZVNjcm9sbGJhciIsIm9uTW91c2VFbnRlciIsIm1vdXNlRW50ZXJlZCIsIl9vbk1vdXNlRW50ZXJlZCIsIl9vbk1vdXNlTW92ZSIsImUiLCJjbGllbnRYIiwiY2xpZW50WSIsImZvcmNlVmlzaWJsZSIsIm9uTW91c2VNb3ZlRm9yQXhpcyIsIm9uTW91c2VMZWF2ZSIsImNhbmNlbCIsIm9uTW91c2VMZWF2ZUZvckF4aXMiLCJfb25XaW5kb3dSZXNpemUiLCJnZXRTY3JvbGxiYXJXaWR0aCIsImhpZGVOYXRpdmVTY3JvbGxiYXIiLCJvblBvaW50ZXJFdmVudCIsInRyYWNrIiwic2Nyb2xsYmFyIiwiaXNXaXRoaW5UcmFja1hCb3VuZHMiLCJpc1dpdGhpblRyYWNrWUJvdW5kcyIsInJlY3QiLCJpc1dpdGhpbkJvdW5kcyIsInN0b3BQcm9wYWdhdGlvbiIsInR5cGUiLCJwb2ludGVyVHlwZSIsIm9uRHJhZ1N0YXJ0Iiwib25UcmFja0NsaWNrIiwiZHJhZyIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiX2oiLCJfayIsIl9sIiwiZHJhZ2dlZEF4aXMiLCJldmVudE9mZnNldCIsInRyYWNrU2l6ZSIsInNpemVBdHRyIiwiY29udGVudFNpemUiLCJzY3JvbGxTaXplQXR0ciIsImhvc3RTaXplIiwicGFyc2VJbnQiLCJwcmV2ZW50RGVmYXVsdCIsInBhZ2VZIiwicGFnZVgiLCJkcmFnUG9zIiwib2Zmc2V0QXR0ciIsImRyYWdPZmZzZXQiLCJzaXplIiwiZHJhZ1BlcmMiLCJzY3JvbGxQb3MiLCJnZXRSdGxIZWxwZXJzIiwiaXNTY3JvbGxpbmdUb05lZ2F0aXZlIiwic2Nyb2xsT2Zmc2V0QXR0ciIsIm9uRW5kRHJhZyIsImVsRG9jdW1lbnQiLCJkcmFnZ2luZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwicHJldmVudENsaWNrIiwiZGVmYXVsdE9wdGlvbnMiLCJvZmZzZXRTaXplQXR0ciIsIm92ZXJmbG93QXR0ciIsImlzVmlzaWJsZSIsIm5vZGVOYW1lIiwiRXJyb3IiLCJsZWFkaW5nIiwiaW5pdCIsImR1bW15RGl2IiwiaW5uZXJIVE1MIiwic2Nyb2xsYmFyRHVtbXlFbCIsImZpcnN0RWxlbWVudENoaWxkIiwiZHVtbXlDaGlsZCIsInNjcm9sbExlZnQiLCJkdW1teUNvbnRhaW5lck9mZnNldCIsImdldE9mZnNldCIsImR1bW15Q2hpbGRPZmZzZXQiLCJkdW1teUNoaWxkT2Zmc2V0QWZ0ZXJTY3JvbGwiLCJpc1Njcm9sbE9yaWdpbkF0WmVybyIsImxlZnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwidG9wIiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJwYWdlWE9mZnNldCIsImluaXRET00iLCJyZWNhbGN1bGF0ZSIsImluaXRMaXN0ZW5lcnMiLCJxdWVyeVNlbGVjdG9yIiwid3JhcHBlciIsInNjcm9sbGFibGVOb2RlIiwiY29udGVudFdyYXBwZXIiLCJjb250ZW50Tm9kZSIsIm9mZnNldCIsIm1hc2siLCJmaW5kQ2hpbGQiLCJwbGFjZWhvbGRlciIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsInZpc2libGUiLCJSZXNpemVPYnNlcnZlciIsInJlc2l6ZU9ic2VydmVyU3RhcnRlZF8xIiwib2JzZXJ2ZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImRpcmVjdGlvbiIsImNvbnRlbnRFbE9mZnNldFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJpc0hlaWdodEF1dG8iLCJvZmZzZXRIZWlnaHQiLCJpc1dpZHRoQXV0byIsImNvbnRlbnRXcmFwcGVyRWxPZmZzZXRXaWR0aCIsImVsT3ZlcmZsb3dYIiwib3ZlcmZsb3dYIiwiZWxPdmVyZmxvd1kiLCJvdmVyZmxvd1kiLCJwYWRkaW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsIm1hcmdpbiIsImNvbnRlbnRFbFNjcm9sbEhlaWdodCIsInNjcm9sbEhlaWdodCIsImNvbnRlbnRFbFNjcm9sbFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJoZWlnaHQiLCJjb250ZW50V3JhcHBlckVsT2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0Rm9yWFNjcm9sbGJhciIsIm9mZnNldEZvcllTY3JvbGxiYXIiLCJnZXRTY3JvbGxiYXJTaXplIiwidG9nZ2xlVHJhY2tWaXNpYmlsaXR5Iiwic2Nyb2xsYmFyUmF0aW8iLCJzY3JvbGxiYXJTaXplIiwiTWF0aCIsIm1heCIsInNjcm9sbGJhck1pblNpemUiLCJzY3JvbGxiYXJNYXhTaXplIiwibWluIiwic2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsUG91cmNlbnQiLCJoYW5kbGVPZmZzZXQiLCJ0cmFuc2Zvcm0iLCJ2aXNpYmlsaXR5Iiwic2Nyb2xsYWJsZSIsImJvdHRvbSIsImN1cnJlbnRBeGlzIiwiaG92ZXIiLCJjbGVhclRpbWVvdXQiLCJjbGlja09uVHJhY2siLCJzY3JvbGxiYXJPZmZzZXQiLCJzY3JvbGxlZCIsImRpciIsInNjcm9sbFNpemUiLCJzcGVlZCIsInNjcm9sbFRvIiwiZ2V0Q29udGVudEVsZW1lbnQiLCJnZXRTY3JvbGxFbGVtZW50IiwicmVtb3ZlTGlzdGVuZXJzIiwiZGlzY29ubmVjdCIsInVuTW91bnQiLCJiYm94IiwicXVlcnkiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJmaWx0ZXIiLCJjaGlsZHJlbiIsImNoaWxkIiwiYXJpYUxhYmVsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simplebar-core/dist/index.mjs\n");

/***/ })

};
;