"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SEEK_ON_PLAY_EXPIRY = 5000;\nvar Player = /*#__PURE__*/ function(_Component) {\n    _inherits(Player, _Component);\n    var _super = _createSuper(Player);\n    function Player() {\n        var _this;\n        _classCallCheck(this, Player);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isReady\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isPlaying\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isLoading\", true);\n        _defineProperty(_assertThisInitialized(_this), \"loadOnReady\", null);\n        _defineProperty(_assertThisInitialized(_this), \"startOnPlay\", true);\n        _defineProperty(_assertThisInitialized(_this), \"seekOnPlay\", null);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationCalled\", false);\n        _defineProperty(_assertThisInitialized(_this), \"handlePlayerMount\", function(player) {\n            if (_this.player) {\n                _this.progress(); // Ensure onProgress is still called in strict mode\n                return; // Return here to prevent loading twice in strict mode\n            }\n            _this.player = player;\n            _this.player.load(_this.props.url);\n            _this.progress();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function(key) {\n            if (!_this.player) return null;\n            return _this.player[key];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"progress\", function() {\n            if (_this.props.url && _this.player && _this.isReady) {\n                var playedSeconds = _this.getCurrentTime() || 0;\n                var loadedSeconds = _this.getSecondsLoaded();\n                var duration = _this.getDuration();\n                if (duration) {\n                    var progress = {\n                        playedSeconds: playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    } // Only call onProgress if values have changed\n                    if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {\n                        _this.props.onProgress(progress);\n                    }\n                    _this.prevPlayed = progress.playedSeconds;\n                    _this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n            if (!_this.mounted) return;\n            _this.isReady = true;\n            _this.isLoading = false;\n            var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;\n            onReady();\n            if (!muted && volume !== null) {\n                _this.player.setVolume(volume);\n            }\n            if (_this.loadOnReady) {\n                _this.player.load(_this.loadOnReady, true);\n                _this.loadOnReady = null;\n            } else if (playing) {\n                _this.player.play();\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePlay\", function() {\n            _this.isPlaying = true;\n            _this.isLoading = false;\n            var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;\n            if (_this.startOnPlay) {\n                if (_this.player.setPlaybackRate && playbackRate !== 1) {\n                    _this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                _this.startOnPlay = false;\n            }\n            onPlay();\n            if (_this.seekOnPlay) {\n                _this.seekTo(_this.seekOnPlay);\n                _this.seekOnPlay = null;\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePause\", function(e) {\n            _this.isPlaying = false;\n            if (!_this.isLoading) {\n                _this.props.onPause(e);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleEnded\", function() {\n            var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;\n            if (activePlayer.loopOnEnded && loop) {\n                _this.seekTo(0);\n            }\n            if (!loop) {\n                _this.isPlaying = false;\n                onEnded();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleError\", function() {\n            var _this$props4;\n            _this.isLoading = false;\n            (_this$props4 = _this.props).onError.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDurationCheck\", function() {\n            clearTimeout(_this.durationCheckTimeout);\n            var duration = _this.getDuration();\n            if (duration) {\n                if (!_this.onDurationCalled) {\n                    _this.props.onDuration(duration);\n                    _this.onDurationCalled = true;\n                }\n            } else {\n                _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleLoaded\", function() {\n            // Sometimes we know loading has stopped but onReady/onPlay are never called\n            // so this provides a way for players to avoid getting stuck\n            _this.isLoading = false;\n        });\n        return _this;\n    }\n    _createClass(Player, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                clearTimeout(this.progressTimeout);\n                clearTimeout(this.durationCheckTimeout);\n                if (this.isReady && this.props.stopOnUnmount) {\n                    this.player.stop();\n                    if (this.player.disablePIP) {\n                        this.player.disablePIP();\n                    }\n                }\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this2 = this;\n                // If there isn’t a player available, don’t do anything\n                if (!this.player) {\n                    return;\n                } // Invoke player methods based on changed props\n                var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;\n                if (!(0, _reactFastCompare[\"default\"])(prevProps.url, url)) {\n                    if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {\n                        console.warn(\"ReactPlayer: the attempt to load \".concat(url, \" is being deferred until the player has loaded\"));\n                        this.loadOnReady = url;\n                        return;\n                    }\n                    this.isLoading = true;\n                    this.startOnPlay = true;\n                    this.onDurationCalled = false;\n                    this.player.load(url, this.isReady);\n                }\n                if (!prevProps.playing && playing && !this.isPlaying) {\n                    this.player.play();\n                }\n                if (prevProps.playing && !playing && this.isPlaying) {\n                    this.player.pause();\n                }\n                if (!prevProps.pip && pip && this.player.enablePIP) {\n                    this.player.enablePIP();\n                }\n                if (prevProps.pip && !pip && this.player.disablePIP) {\n                    this.player.disablePIP();\n                }\n                if (prevProps.volume !== volume && volume !== null) {\n                    this.player.setVolume(volume);\n                }\n                if (prevProps.muted !== muted) {\n                    if (muted) {\n                        this.player.mute();\n                    } else {\n                        this.player.unmute();\n                        if (volume !== null) {\n                            // Set volume next tick to fix a bug with DailyMotion\n                            setTimeout(function() {\n                                return _this2.player.setVolume(volume);\n                            });\n                        }\n                    }\n                }\n                if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                if (prevProps.loop !== loop && this.player.setLoop) {\n                    this.player.setLoop(loop);\n                }\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.isReady) return null;\n                return this.player.getDuration();\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.isReady) return null;\n                return this.player.getCurrentTime();\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.isReady) return null;\n                return this.player.getSecondsLoaded();\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount, type, keepPlaying) {\n                var _this3 = this;\n                // When seeking before player is ready, store value and seek later\n                if (!this.isReady) {\n                    if (amount !== 0) {\n                        this.seekOnPlay = amount;\n                        setTimeout(function() {\n                            _this3.seekOnPlay = null;\n                        }, SEEK_ON_PLAY_EXPIRY);\n                    }\n                    return;\n                }\n                var isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n                if (isFraction) {\n                    // Convert fraction to seconds based on duration\n                    var duration = this.player.getDuration();\n                    if (!duration) {\n                        console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                        return;\n                    }\n                    this.player.seekTo(duration * amount, keepPlaying);\n                    return;\n                }\n                this.player.seekTo(amount, keepPlaying);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var Player = this.props.activePlayer;\n                if (!Player) {\n                    return null;\n                }\n                return /*#__PURE__*/ _react[\"default\"].createElement(Player, _extends({}, this.props, {\n                    onMount: this.handlePlayerMount,\n                    onReady: this.handleReady,\n                    onPlay: this.handlePlay,\n                    onPause: this.handlePause,\n                    onEnded: this.handleEnded,\n                    onLoaded: this.handleLoaded,\n                    onError: this.handleError\n                }));\n            }\n        }\n    ]);\n    return Player;\n}(_react.Component);\nexports[\"default\"] = Player;\n_defineProperty(Player, \"displayName\", \"Player\");\n_defineProperty(Player, \"propTypes\", _props.propTypes);\n_defineProperty(Player, \"defaultProps\", _props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ICON_SIZE = \"64px\";\nvar cache = {};\nvar Preview = /*#__PURE__*/ function(_Component) {\n    _inherits(Preview, _Component);\n    var _super = _createSuper(Preview);\n    function Preview() {\n        var _this;\n        _classCallCheck(this, Preview);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n            image: null\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function(e) {\n            if (e.key === \"Enter\" || e.key === \" \") {\n                _this.props.onClick();\n            }\n        });\n        return _this;\n    }\n    _createClass(Preview, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n                this.fetchImage(this.props);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this$props = this.props, url = _this$props.url, light = _this$props.light;\n                if (prevProps.url !== url || prevProps.light !== light) {\n                    this.fetchImage(this.props);\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"fetchImage\",\n            value: function fetchImage(_ref) {\n                var _this2 = this;\n                var url = _ref.url, light = _ref.light, oEmbedUrl = _ref.oEmbedUrl;\n                if (/*#__PURE__*/ _react[\"default\"].isValidElement(light)) {\n                    return;\n                }\n                if (typeof light === \"string\") {\n                    this.setState({\n                        image: light\n                    });\n                    return;\n                }\n                if (cache[url]) {\n                    this.setState({\n                        image: cache[url]\n                    });\n                    return;\n                }\n                this.setState({\n                    image: null\n                });\n                return window.fetch(oEmbedUrl.replace(\"{url}\", url)).then(function(response) {\n                    return response.json();\n                }).then(function(data) {\n                    if (data.thumbnail_url && _this2.mounted) {\n                        var image = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n                        _this2.setState({\n                            image: image\n                        });\n                        cache[url] = image;\n                    }\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, light = _this$props2.light, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon, previewTabIndex = _this$props2.previewTabIndex;\n                var image = this.state.image;\n                var isElement = /*#__PURE__*/ _react[\"default\"].isValidElement(light);\n                var flexCenter = {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                };\n                var styles = {\n                    preview: _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        backgroundImage: image && !isElement ? \"url(\".concat(image, \")\") : undefined,\n                        backgroundSize: \"cover\",\n                        backgroundPosition: \"center\",\n                        cursor: \"pointer\"\n                    }, flexCenter),\n                    shadow: _objectSpread({\n                        background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                        borderRadius: ICON_SIZE,\n                        width: ICON_SIZE,\n                        height: ICON_SIZE,\n                        position: isElement ? \"absolute\" : undefined\n                    }, flexCenter),\n                    playIcon: {\n                        borderStyle: \"solid\",\n                        borderWidth: \"16px 0 16px 26px\",\n                        borderColor: \"transparent transparent transparent white\",\n                        marginLeft: \"7px\"\n                    }\n                };\n                var defaultPlayIcon = /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.shadow,\n                    className: \"react-player__shadow\"\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.playIcon,\n                    className: \"react-player__play-icon\"\n                }));\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.preview,\n                    className: \"react-player__preview\",\n                    onClick: onClick,\n                    tabIndex: previewTabIndex,\n                    onKeyPress: this.handleKeyPress\n                }, isElement ? light : null, playIcon || defaultPlayIcon);\n            }\n        }\n    ]);\n    return Preview;\n}(_react.Component);\nexports[\"default\"] = Preview;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createReactPlayer = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nvar _memoizeOne = _interopRequireDefault(__webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _Player3 = _interopRequireDefault(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar Preview = /*#__PURE__*/ (0, _react.lazy)(function() {\n    return Promise.resolve().then(function() {\n        return _interopRequireWildcard(__webpack_require__(/*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\"));\n    });\n});\nvar IS_BROWSER =  false && 0;\nvar IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nvar SUPPORTED_PROPS = Object.keys(_props.propTypes); // Return null when rendering on the server\n// as Suspense is not supported yet\nvar UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {\n    return null;\n};\nvar customPlayers = [];\nvar createReactPlayer = function createReactPlayer(players, fallback) {\n    var _class, _temp;\n    return _temp = _class = /*#__PURE__*/ function(_Component) {\n        _inherits(ReactPlayer, _Component);\n        var _super = _createSuper(ReactPlayer);\n        function ReactPlayer() {\n            var _this;\n            _classCallCheck(this, ReactPlayer);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = _super.call.apply(_super, [\n                this\n            ].concat(args));\n            _defineProperty(_assertThisInitialized(_this), \"state\", {\n                showPreview: !!_this.props.light\n            });\n            _defineProperty(_assertThisInitialized(_this), \"references\", {\n                wrapper: function wrapper(_wrapper) {\n                    _this.wrapper = _wrapper;\n                },\n                player: function player(_player) {\n                    _this.player = _player;\n                }\n            });\n            _defineProperty(_assertThisInitialized(_this), \"handleClickPreview\", function(e) {\n                _this.setState({\n                    showPreview: false\n                });\n                _this.props.onClickPreview(e);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"showPreview\", function() {\n                _this.setState({\n                    showPreview: true\n                });\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getDuration\", function() {\n                if (!_this.player) return null;\n                return _this.player.getDuration();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getCurrentTime\", function() {\n                if (!_this.player) return null;\n                return _this.player.getCurrentTime();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getSecondsLoaded\", function() {\n                if (!_this.player) return null;\n                return _this.player.getSecondsLoaded();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function() {\n                var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"player\";\n                if (!_this.player) return null;\n                return _this.player.getInternalPlayer(key);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"seekTo\", function(fraction, type, keepPlaying) {\n                if (!_this.player) return null;\n                _this.player.seekTo(fraction, type, keepPlaying);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n                _this.props.onReady(_assertThisInitialized(_this));\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getActivePlayer\", (0, _memoizeOne[\"default\"])(function(url) {\n                for(var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray(players)); _i < _arr.length; _i++){\n                    var player = _arr[_i];\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"getConfig\", (0, _memoizeOne[\"default\"])(function(url, key) {\n                var config = _this.props.config;\n                return _deepmerge[\"default\"].all([\n                    _props.defaultProps.config,\n                    _props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"getAttributes\", (0, _memoizeOne[\"default\"])(function(url) {\n                return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"renderActivePlayer\", function(url) {\n                if (!url) return null;\n                var player = _this.getActivePlayer(url);\n                if (!player) return null;\n                var config = _this.getConfig(url, player.key);\n                return /*#__PURE__*/ _react[\"default\"].createElement(_Player3[\"default\"], _extends({}, _this.props, {\n                    key: player.key,\n                    ref: _this.references.player,\n                    config: config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: _this.handleReady\n                }));\n            });\n            return _this;\n        }\n        _createClass(ReactPlayer, [\n            {\n                key: \"shouldComponentUpdate\",\n                value: function shouldComponentUpdate(nextProps, nextState) {\n                    return !(0, _reactFastCompare[\"default\"])(this.props, nextProps) || !(0, _reactFastCompare[\"default\"])(this.state, nextState);\n                }\n            },\n            {\n                key: \"componentDidUpdate\",\n                value: function componentDidUpdate(prevProps) {\n                    var light = this.props.light;\n                    if (!prevProps.light && light) {\n                        this.setState({\n                            showPreview: true\n                        });\n                    }\n                    if (prevProps.light && !light) {\n                        this.setState({\n                            showPreview: false\n                        });\n                    }\n                }\n            },\n            {\n                key: \"renderPreview\",\n                value: function renderPreview(url) {\n                    if (!url) return null;\n                    var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;\n                    return /*#__PURE__*/ _react[\"default\"].createElement(Preview, {\n                        url: url,\n                        light: light,\n                        playIcon: playIcon,\n                        previewTabIndex: previewTabIndex,\n                        oEmbedUrl: oEmbedUrl,\n                        onClick: this.handleClickPreview\n                    });\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback = _this$props2.fallback, Wrapper = _this$props2.wrapper;\n                    var showPreview = this.state.showPreview;\n                    var attributes = this.getAttributes(url);\n                    var wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : undefined;\n                    return /*#__PURE__*/ _react[\"default\"].createElement(Wrapper, _extends({\n                        ref: wrapperRef,\n                        style: _objectSpread(_objectSpread({}, style), {}, {\n                            width: width,\n                            height: height\n                        })\n                    }, attributes), /*#__PURE__*/ _react[\"default\"].createElement(UniversalSuspense, {\n                        fallback: fallback\n                    }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n                }\n            }\n        ]);\n        return ReactPlayer;\n    }(_react.Component), _defineProperty(_class, \"displayName\", \"ReactPlayer\"), _defineProperty(_class, \"propTypes\", _props.propTypes), _defineProperty(_class, \"defaultProps\", _props.defaultProps), _defineProperty(_class, \"addCustomPlayer\", function(player) {\n        customPlayers.push(player);\n    }), _defineProperty(_class, \"removeCustomPlayers\", function() {\n        customPlayers.length = 0;\n    }), _defineProperty(_class, \"canPlay\", function(url) {\n        for(var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray(players)); _i2 < _arr2.length; _i2++){\n            var _Player = _arr2[_i2];\n            if (_Player.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _defineProperty(_class, \"canEnablePIP\", function(url) {\n        for(var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray(players)); _i3 < _arr3.length; _i3++){\n            var _Player2 = _arr3[_i3];\n            if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _temp;\n};\nexports.createReactPlayer = createReactPlayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9SZWFjdFBsYXllci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUcsS0FBSztBQUVqQyxJQUFJRyxTQUFTQyx3QkFBd0JDLG1CQUFPQSxDQUFDLHdHQUFPO0FBRXBELElBQUlDLGFBQWFDLHVCQUF1QkYsbUJBQU9BLENBQUMsNkRBQVc7QUFFM0QsSUFBSUcsY0FBY0QsdUJBQXVCRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUU5RCxJQUFJSSxvQkFBb0JGLHVCQUF1QkYsbUJBQU9BLENBQUMsNEVBQW9CO0FBRTNFLElBQUlLLFNBQVNMLG1CQUFPQSxDQUFDLCtEQUFTO0FBRTlCLElBQUlNLFNBQVNOLG1CQUFPQSxDQUFDLCtEQUFTO0FBRTlCLElBQUlPLFdBQVdMLHVCQUF1QkYsbUJBQU9BLENBQUMsaUVBQVU7QUFFeEQsU0FBU0UsdUJBQXVCTSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUFHO0FBRWhHLFNBQVNFLFFBQVFGLEdBQUc7SUFBSTtJQUEyQixJQUFJLE9BQU9HLFdBQVcsY0FBYyxPQUFPQSxPQUFPQyxRQUFRLEtBQUssVUFBVTtRQUFFRixVQUFVLFNBQVNBLFFBQVFGLEdBQUc7WUFBSSxPQUFPLE9BQU9BO1FBQUs7SUFBRyxPQUFPO1FBQUVFLFVBQVUsU0FBU0EsUUFBUUYsR0FBRztZQUFJLE9BQU9BLE9BQU8sT0FBT0csV0FBVyxjQUFjSCxJQUFJSyxXQUFXLEtBQUtGLFVBQVVILFFBQVFHLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9OO1FBQUs7SUFBRztJQUFFLE9BQU9FLFFBQVFGO0FBQU07QUFFelgsU0FBU08sUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT3pCLE9BQU95QixJQUFJLENBQUNGO0lBQVMs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QUNaLGVBQWVuRixtQkFBbUJvRixXQUFXeUUsTUFBTUMsTUFBTXpLLE1BQU0sRUFBRXdLLE1BQU87WUFDMUcsSUFBSUUsV0FBV0QsS0FBSyxDQUFDRCxJQUFJO1lBRXpCLElBQUlFLFNBQVNDLFlBQVksSUFBSUQsU0FBU0MsWUFBWSxDQUFDOUMsTUFBTTtnQkFDdkQsT0FBTztZQUNUO1FBQ0Y7UUFFQSxPQUFPO0lBQ1QsSUFBSTNCO0FBQ047QUFFQXRJLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1pbnF1aXJ5LXJvb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9SZWFjdFBsYXllci5qcz9kNjg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVSZWFjdFBsYXllciA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF9tZW1vaXplT25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibWVtb2l6ZS1vbmVcIikpO1xuXG52YXIgX3JlYWN0RmFzdENvbXBhcmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1mYXN0LWNvbXBhcmVcIikpO1xuXG52YXIgX3Byb3BzID0gcmVxdWlyZShcIi4vcHJvcHNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIF9QbGF5ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QbGF5ZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG52YXIgUHJldmlldyA9IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL1ByZXZpZXcnKSk7XG4gIH0pO1xufSk7XG52YXIgSVNfQlJPV1NFUiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudDtcbnZhciBJU19HTE9CQUwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwud2luZG93ICYmIGdsb2JhbC53aW5kb3cuZG9jdW1lbnQ7XG52YXIgU1VQUE9SVEVEX1BST1BTID0gT2JqZWN0LmtleXMoX3Byb3BzLnByb3BUeXBlcyk7IC8vIFJldHVybiBudWxsIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXJcbi8vIGFzIFN1c3BlbnNlIGlzIG5vdCBzdXBwb3J0ZWQgeWV0XG5cbnZhciBVbml2ZXJzYWxTdXNwZW5zZSA9IElTX0JST1dTRVIgfHwgSVNfR0xPQkFMID8gX3JlYWN0LlN1c3BlbnNlIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG52YXIgY3VzdG9tUGxheWVycyA9IFtdO1xuXG52YXIgY3JlYXRlUmVhY3RQbGF5ZXIgPSBmdW5jdGlvbiBjcmVhdGVSZWFjdFBsYXllcihwbGF5ZXJzLCBmYWxsYmFjaykge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUmVhY3RQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gICAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSZWFjdFBsYXllcik7XG5cbiAgICBmdW5jdGlvbiBSZWFjdFBsYXllcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0UGxheWVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgICAgc2hvd1ByZXZpZXc6ICEhX3RoaXMucHJvcHMubGlnaHRcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVmZXJlbmNlc1wiLCB7XG4gICAgICAgIHdyYXBwZXI6IGZ1bmN0aW9uIHdyYXBwZXIoX3dyYXBwZXIpIHtcbiAgICAgICAgICBfdGhpcy53cmFwcGVyID0gX3dyYXBwZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHBsYXllcjogZnVuY3Rpb24gcGxheWVyKF9wbGF5ZXIpIHtcbiAgICAgICAgICBfdGhpcy5wbGF5ZXIgPSBfcGxheWVyO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrUHJldmlld1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvd1ByZXZpZXc6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2tQcmV2aWV3KGUpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzaG93UHJldmlld1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93UHJldmlldzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0RHVyYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0Q3VycmVudFRpbWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0U2Vjb25kc0xvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldEludGVybmFsUGxheWVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3BsYXllcic7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRJbnRlcm5hbFBsYXllcihrZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWVrVG9cIiwgZnVuY3Rpb24gKGZyYWN0aW9uLCB0eXBlLCBrZWVwUGxheWluZykge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgX3RoaXMucGxheWVyLnNlZWtUbyhmcmFjdGlvbiwgdHlwZSwga2VlcFBsYXlpbmcpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSZWFkeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uUmVhZHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRBY3RpdmVQbGF5ZXJcIiwgKDAsIF9tZW1vaXplT25lW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hcnIgPSBbXS5jb25jYXQoY3VzdG9tUGxheWVycywgX3RvQ29uc3VtYWJsZUFycmF5KHBsYXllcnMpKTsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciBwbGF5ZXIgPSBfYXJyW19pXTtcblxuICAgICAgICAgIGlmIChwbGF5ZXIuY2FuUGxheSh1cmwpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGxheWVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSkpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0Q29uZmlnXCIsICgwLCBfbWVtb2l6ZU9uZVtcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICh1cmwsIGtleSkge1xuICAgICAgICB2YXIgY29uZmlnID0gX3RoaXMucHJvcHMuY29uZmlnO1xuICAgICAgICByZXR1cm4gX2RlZXBtZXJnZVtcImRlZmF1bHRcIl0uYWxsKFtfcHJvcHMuZGVmYXVsdFByb3BzLmNvbmZpZywgX3Byb3BzLmRlZmF1bHRQcm9wcy5jb25maWdba2V5XSB8fCB7fSwgY29uZmlnLCBjb25maWdba2V5XSB8fCB7fV0pO1xuICAgICAgfSkpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0QXR0cmlidXRlc1wiLCAoMCwgX21lbW9pemVPbmVbXCJkZWZhdWx0XCJdKShmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHJldHVybiAoMCwgX3V0aWxzLm9taXQpKF90aGlzLnByb3BzLCBTVVBQT1JURURfUFJPUFMpO1xuICAgICAgfSkpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyQWN0aXZlUGxheWVyXCIsIGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgaWYgKCF1cmwpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHZhciBwbGF5ZXIgPSBfdGhpcy5nZXRBY3RpdmVQbGF5ZXIodXJsKTtcblxuICAgICAgICBpZiAoIXBsYXllcikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IF90aGlzLmdldENvbmZpZyh1cmwsIHBsYXllci5rZXkpO1xuXG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9QbGF5ZXIzW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgICAga2V5OiBwbGF5ZXIua2V5LFxuICAgICAgICAgIHJlZjogX3RoaXMucmVmZXJlbmNlcy5wbGF5ZXIsXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgYWN0aXZlUGxheWVyOiBwbGF5ZXIubGF6eVBsYXllciB8fCBwbGF5ZXIsXG4gICAgICAgICAgb25SZWFkeTogX3RoaXMuaGFuZGxlUmVhZHlcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoUmVhY3RQbGF5ZXIsIFt7XG4gICAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHJldHVybiAhKDAsIF9yZWFjdEZhc3RDb21wYXJlW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9yZWFjdEZhc3RDb21wYXJlW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgICB2YXIgbGlnaHQgPSB0aGlzLnByb3BzLmxpZ2h0O1xuXG4gICAgICAgIGlmICghcHJldlByb3BzLmxpZ2h0ICYmIGxpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93UHJldmlldzogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZQcm9wcy5saWdodCAmJiAhbGlnaHQpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dQcmV2aWV3OiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclByZXZpZXdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQcmV2aWV3KHVybCkge1xuICAgICAgICBpZiAoIXVybCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBsaWdodCA9IF90aGlzJHByb3BzLmxpZ2h0LFxuICAgICAgICAgICAgcGxheUljb24gPSBfdGhpcyRwcm9wcy5wbGF5SWNvbixcbiAgICAgICAgICAgIHByZXZpZXdUYWJJbmRleCA9IF90aGlzJHByb3BzLnByZXZpZXdUYWJJbmRleCxcbiAgICAgICAgICAgIG9FbWJlZFVybCA9IF90aGlzJHByb3BzLm9FbWJlZFVybDtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoUHJldmlldywge1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIGxpZ2h0OiBsaWdodCxcbiAgICAgICAgICBwbGF5SWNvbjogcGxheUljb24sXG4gICAgICAgICAgcHJldmlld1RhYkluZGV4OiBwcmV2aWV3VGFiSW5kZXgsXG4gICAgICAgICAgb0VtYmVkVXJsOiBvRW1iZWRVcmwsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1ByZXZpZXdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICB1cmwgPSBfdGhpcyRwcm9wczIudXJsLFxuICAgICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczIuc3R5bGUsXG4gICAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzMi53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzMi5oZWlnaHQsXG4gICAgICAgICAgICBmYWxsYmFjayA9IF90aGlzJHByb3BzMi5mYWxsYmFjayxcbiAgICAgICAgICAgIFdyYXBwZXIgPSBfdGhpcyRwcm9wczIud3JhcHBlcjtcbiAgICAgICAgdmFyIHNob3dQcmV2aWV3ID0gdGhpcy5zdGF0ZS5zaG93UHJldmlldztcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmdldEF0dHJpYnV0ZXModXJsKTtcbiAgICAgICAgdmFyIHdyYXBwZXJSZWYgPSB0eXBlb2YgV3JhcHBlciA9PT0gJ3N0cmluZycgPyB0aGlzLnJlZmVyZW5jZXMud3JhcHBlciA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoV3JhcHBlciwgX2V4dGVuZHMoe1xuICAgICAgICAgIHJlZjogd3JhcHBlclJlZixcbiAgICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZSksIHt9LCB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIGF0dHJpYnV0ZXMpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFVuaXZlcnNhbFN1c3BlbnNlLCB7XG4gICAgICAgICAgZmFsbGJhY2s6IGZhbGxiYWNrXG4gICAgICAgIH0sIHNob3dQcmV2aWV3ID8gdGhpcy5yZW5kZXJQcmV2aWV3KHVybCkgOiB0aGlzLnJlbmRlckFjdGl2ZVBsYXllcih1cmwpKSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFJlYWN0UGxheWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImRpc3BsYXlOYW1lXCIsICdSZWFjdFBsYXllcicpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcInByb3BUeXBlc1wiLCBfcHJvcHMucHJvcFR5cGVzKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJkZWZhdWx0UHJvcHNcIiwgX3Byb3BzLmRlZmF1bHRQcm9wcyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiYWRkQ3VzdG9tUGxheWVyXCIsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICBjdXN0b21QbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwicmVtb3ZlQ3VzdG9tUGxheWVyc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgY3VzdG9tUGxheWVycy5sZW5ndGggPSAwO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJjYW5QbGF5XCIsIGZ1bmN0aW9uICh1cmwpIHtcbiAgICBmb3IgKHZhciBfaTIgPSAwLCBfYXJyMiA9IFtdLmNvbmNhdChjdXN0b21QbGF5ZXJzLCBfdG9Db25zdW1hYmxlQXJyYXkocGxheWVycykpOyBfaTIgPCBfYXJyMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgX1BsYXllciA9IF9hcnIyW19pMl07XG5cbiAgICAgIGlmIChfUGxheWVyLmNhblBsYXkodXJsKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImNhbkVuYWJsZVBJUFwiLCBmdW5jdGlvbiAodXJsKSB7XG4gICAgZm9yICh2YXIgX2kzID0gMCwgX2FycjMgPSBbXS5jb25jYXQoY3VzdG9tUGxheWVycywgX3RvQ29uc3VtYWJsZUFycmF5KHBsYXllcnMpKTsgX2kzIDwgX2FycjMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgdmFyIF9QbGF5ZXIyID0gX2FycjNbX2kzXTtcblxuICAgICAgaWYgKF9QbGF5ZXIyLmNhbkVuYWJsZVBJUCAmJiBfUGxheWVyMi5jYW5FbmFibGVQSVAodXJsKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pLCBfdGVtcDtcbn07XG5cbmV4cG9ydHMuY3JlYXRlUmVhY3RQbGF5ZXIgPSBjcmVhdGVSZWFjdFBsYXllcjsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVSZWFjdFBsYXllciIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9kZWVwbWVyZ2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX21lbW9pemVPbmUiLCJfcmVhY3RGYXN0Q29tcGFyZSIsIl9wcm9wcyIsIl91dGlscyIsIl9QbGF5ZXIzIiwib2JqIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwiaXRlciIsImlzQXJyYXkiLCJsZW4iLCJhcnIyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJlIiwiZ2V0UHJvdG90eXBlT2YiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJkZXNjIiwic2V0IiwiUHJldmlldyIsImxhenkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJJU19CUk9XU0VSIiwid2luZG93IiwiZG9jdW1lbnQiLCJJU19HTE9CQUwiLCJnbG9iYWwiLCJTVVBQT1JURURfUFJPUFMiLCJwcm9wVHlwZXMiLCJVbml2ZXJzYWxTdXNwZW5zZSIsIlN1c3BlbnNlIiwiY3VzdG9tUGxheWVycyIsInBsYXllcnMiLCJmYWxsYmFjayIsIl9jbGFzcyIsIl90ZW1wIiwiX0NvbXBvbmVudCIsIlJlYWN0UGxheWVyIiwiX3N1cGVyIiwiX3RoaXMiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJjb25jYXQiLCJzaG93UHJldmlldyIsImxpZ2h0Iiwid3JhcHBlciIsIl93cmFwcGVyIiwicGxheWVyIiwiX3BsYXllciIsInNldFN0YXRlIiwib25DbGlja1ByZXZpZXciLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsInVuZGVmaW5lZCIsImdldEludGVybmFsUGxheWVyIiwiZnJhY3Rpb24iLCJ0eXBlIiwia2VlcFBsYXlpbmciLCJzZWVrVG8iLCJvblJlYWR5IiwidXJsIiwiX2kiLCJfYXJyIiwiY2FuUGxheSIsImNvbmZpZyIsImFsbCIsImRlZmF1bHRQcm9wcyIsIm9taXQiLCJnZXRBY3RpdmVQbGF5ZXIiLCJnZXRDb25maWciLCJjcmVhdGVFbGVtZW50IiwicmVmIiwicmVmZXJlbmNlcyIsImFjdGl2ZVBsYXllciIsImxhenlQbGF5ZXIiLCJoYW5kbGVSZWFkeSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsInN0YXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicmVuZGVyUHJldmlldyIsIl90aGlzJHByb3BzIiwicGxheUljb24iLCJwcmV2aWV3VGFiSW5kZXgiLCJvRW1iZWRVcmwiLCJvbkNsaWNrIiwiaGFuZGxlQ2xpY2tQcmV2aWV3IiwicmVuZGVyIiwiX3RoaXMkcHJvcHMyIiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsIldyYXBwZXIiLCJhdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsIndyYXBwZXJSZWYiLCJyZW5kZXJBY3RpdmVQbGF5ZXIiLCJDb21wb25lbnQiLCJfaTIiLCJfYXJyMiIsIl9QbGF5ZXIiLCJfaTMiLCJfYXJyMyIsIl9QbGF5ZXIyIiwiY2FuRW5hYmxlUElQIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _players = _interopRequireDefault(__webpack_require__(/*! ./players */ \"(ssr)/./node_modules/react-player/lib/players/index.js\"));\nvar _ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ \"(ssr)/./node_modules/react-player/lib/ReactPlayer.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\n// Fall back to FilePlayer if nothing else can play the URL\nvar fallback = _players[\"default\"][_players[\"default\"].length - 1];\nvar _default = (0, _ReactPlayer.createReactPlayer)(_players[\"default\"], fallback);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxXQUFXQyx1QkFBdUJDLG1CQUFPQSxDQUFDLHlFQUFXO0FBRXpELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDJFQUFlO0FBRTFDLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFBRztBQUVoRywyREFBMkQ7QUFDM0QsSUFBSUUsV0FBV04sUUFBUSxDQUFDLFVBQVUsQ0FBQ0EsUUFBUSxDQUFDLFVBQVUsQ0FBQ08sTUFBTSxHQUFHLEVBQUU7QUFFbEUsSUFBSUMsV0FBVyxDQUFDLEdBQUdMLGFBQWFNLGlCQUFpQixFQUFFVCxRQUFRLENBQUMsVUFBVSxFQUFFTTtBQUV4RVIsa0JBQWtCLEdBQUdVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWlucXVpcnktcm9vbS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL2luZGV4LmpzPzFiOWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wbGF5ZXJzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wbGF5ZXJzXCIpKTtcblxudmFyIF9SZWFjdFBsYXllciA9IHJlcXVpcmUoXCIuL1JlYWN0UGxheWVyXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuLy8gRmFsbCBiYWNrIHRvIEZpbGVQbGF5ZXIgaWYgbm90aGluZyBlbHNlIGNhbiBwbGF5IHRoZSBVUkxcbnZhciBmYWxsYmFjayA9IF9wbGF5ZXJzW1wiZGVmYXVsdFwiXVtfcGxheWVyc1tcImRlZmF1bHRcIl0ubGVuZ3RoIC0gMV07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfUmVhY3RQbGF5ZXIuY3JlYXRlUmVhY3RQbGF5ZXIpKF9wbGF5ZXJzW1wiZGVmYXVsdFwiXSwgZmFsbGJhY2spO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9wbGF5ZXJzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfUmVhY3RQbGF5ZXIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZmFsbGJhY2siLCJsZW5ndGgiLCJfZGVmYXVsdCIsImNyZWF0ZVJlYWN0UGxheWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it;\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = o[Symbol.iterator]();\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nexports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;\nvar MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nexports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;\nvar MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nexports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;\nvar MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nexports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;\nvar MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nexports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;\nvar MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nexports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;\nvar MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nexports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;\nvar MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nexports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;\nvar MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nexports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;\nvar MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nexports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;\nvar MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nexports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;\nvar MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nexports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;\nvar MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nexports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;\nvar AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nexports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;\nvar VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nexports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;\nvar HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nexports.HLS_EXTENSIONS = HLS_EXTENSIONS;\nvar DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nexports.DASH_EXTENSIONS = DASH_EXTENSIONS;\nvar FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nexports.FLV_EXTENSIONS = FLV_EXTENSIONS;\nvar canPlayFile = function canPlayFile(url) {\n    if (url instanceof Array) {\n        var _iterator = _createForOfIteratorHelper(url), _step;\n        try {\n            for(_iterator.s(); !(_step = _iterator.n()).done;){\n                var item = _step.value;\n                if (typeof item === \"string\" && canPlayFile(item)) {\n                    return true;\n                }\n                if (canPlayFile(item.src)) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            _iterator.e(err);\n        } finally{\n            _iterator.f();\n        }\n        return false;\n    }\n    if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nvar canPlay = {\n    youtube: function youtube(url) {\n        if (url instanceof Array) {\n            return url.every(function(item) {\n                return MATCH_URL_YOUTUBE.test(item);\n            });\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: function soundcloud(url) {\n        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);\n    },\n    vimeo: function vimeo(url) {\n        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);\n    },\n    facebook: function facebook(url) {\n        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);\n    },\n    streamable: function streamable(url) {\n        return MATCH_URL_STREAMABLE.test(url);\n    },\n    wistia: function wistia(url) {\n        return MATCH_URL_WISTIA.test(url);\n    },\n    twitch: function twitch(url) {\n        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);\n    },\n    dailymotion: function dailymotion(url) {\n        return MATCH_URL_DAILYMOTION.test(url);\n    },\n    mixcloud: function mixcloud(url) {\n        return MATCH_URL_MIXCLOUD.test(url);\n    },\n    vidyard: function vidyard(url) {\n        return MATCH_URL_VIDYARD.test(url);\n    },\n    kaltura: function kaltura(url) {\n        return MATCH_URL_KALTURA.test(url);\n    },\n    file: canPlayFile\n};\nexports.canPlay = canPlay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wYXR0ZXJucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsZUFBZSxHQUFHQSxzQkFBc0IsR0FBR0EsdUJBQXVCLEdBQUdBLHNCQUFzQixHQUFHQSx3QkFBd0IsR0FBR0Esd0JBQXdCLEdBQUdBLHlCQUF5QixHQUFHQSx5QkFBeUIsR0FBR0EsMEJBQTBCLEdBQUdBLDZCQUE2QixHQUFHQSxnQ0FBZ0MsR0FBR0EsOEJBQThCLEdBQUdBLHdCQUF3QixHQUFHQSw0QkFBNEIsR0FBR0EsZ0NBQWdDLEdBQUdBLDBCQUEwQixHQUFHQSx1QkFBdUIsR0FBR0EsNEJBQTRCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFFamlCLElBQUlxQixTQUFTQyxtQkFBT0EsQ0FBQywrREFBUztBQUU5QixTQUFTQywyQkFBMkJDLENBQUMsRUFBRUMsY0FBYztJQUFJLElBQUlDO0lBQUksSUFBSSxPQUFPQyxXQUFXLGVBQWVILENBQUMsQ0FBQ0csT0FBT0MsUUFBUSxDQUFDLElBQUksTUFBTTtRQUFFLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ04sTUFBT0UsQ0FBQUEsS0FBS0ssNEJBQTRCUCxFQUFDLEtBQU1DLGtCQUFrQkQsS0FBSyxPQUFPQSxFQUFFUSxNQUFNLEtBQUssVUFBVTtZQUFFLElBQUlOLElBQUlGLElBQUlFO1lBQUksSUFBSU8sSUFBSTtZQUFHLElBQUlDLElBQUksU0FBU0EsS0FBSztZQUFHLE9BQU87Z0JBQUVDLEdBQUdEO2dCQUFHRSxHQUFHLFNBQVNBO29CQUFNLElBQUlILEtBQUtULEVBQUVRLE1BQU0sRUFBRSxPQUFPO3dCQUFFSyxNQUFNO29CQUFLO29CQUFHLE9BQU87d0JBQUVBLE1BQU07d0JBQU9wQyxPQUFPdUIsQ0FBQyxDQUFDUyxJQUFJO29CQUFDO2dCQUFHO2dCQUFHSyxHQUFHLFNBQVNBLEVBQUVDLEVBQUU7b0JB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bGF5ZXIvbGliL3BhdHRlcm5zLmpzPzgyOTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhblBsYXkgPSBleHBvcnRzLkZMVl9FWFRFTlNJT05TID0gZXhwb3J0cy5EQVNIX0VYVEVOU0lPTlMgPSBleHBvcnRzLkhMU19FWFRFTlNJT05TID0gZXhwb3J0cy5WSURFT19FWFRFTlNJT05TID0gZXhwb3J0cy5BVURJT19FWFRFTlNJT05TID0gZXhwb3J0cy5NQVRDSF9VUkxfS0FMVFVSQSA9IGV4cG9ydHMuTUFUQ0hfVVJMX1ZJRFlBUkQgPSBleHBvcnRzLk1BVENIX1VSTF9NSVhDTE9VRCA9IGV4cG9ydHMuTUFUQ0hfVVJMX0RBSUxZTU9USU9OID0gZXhwb3J0cy5NQVRDSF9VUkxfVFdJVENIX0NIQU5ORUwgPSBleHBvcnRzLk1BVENIX1VSTF9UV0lUQ0hfVklERU8gPSBleHBvcnRzLk1BVENIX1VSTF9XSVNUSUEgPSBleHBvcnRzLk1BVENIX1VSTF9TVFJFQU1BQkxFID0gZXhwb3J0cy5NQVRDSF9VUkxfRkFDRUJPT0tfV0FUQ0ggPSBleHBvcnRzLk1BVENIX1VSTF9GQUNFQk9PSyA9IGV4cG9ydHMuTUFUQ0hfVVJMX1ZJTUVPID0gZXhwb3J0cy5NQVRDSF9VUkxfU09VTkRDTE9VRCA9IGV4cG9ydHMuTUFUQ0hfVVJMX1lPVVRVQkUgPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxudmFyIE1BVENIX1VSTF9ZT1VUVUJFID0gLyg/OnlvdXR1XFwuYmVcXC98eW91dHViZSg/Oi1ub2Nvb2tpZXxlZHVjYXRpb24pP1xcLmNvbVxcLyg/OmVtYmVkXFwvfHZcXC98d2F0Y2hcXC98d2F0Y2hcXD92PXx3YXRjaFxcPy4rJnY9fHNob3J0c1xcL3xsaXZlXFwvKSkoKFxcd3wtKXsxMX0pfHlvdXR1YmVcXC5jb21cXC9wbGF5bGlzdFxcP2xpc3Q9fHlvdXR1YmVcXC5jb21cXC91c2VyXFwvLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1lPVVRVQkUgPSBNQVRDSF9VUkxfWU9VVFVCRTtcbnZhciBNQVRDSF9VUkxfU09VTkRDTE9VRCA9IC8oPzpzb3VuZGNsb3VkXFwuY29tfHNuZFxcLnNjKVxcL1teLl0rJC87XG5leHBvcnRzLk1BVENIX1VSTF9TT1VORENMT1VEID0gTUFUQ0hfVVJMX1NPVU5EQ0xPVUQ7XG52YXIgTUFUQ0hfVVJMX1ZJTUVPID0gL3ZpbWVvXFwuY29tXFwvKD8hcHJvZ3Jlc3NpdmVfcmVkaXJlY3QpLisvO1xuZXhwb3J0cy5NQVRDSF9VUkxfVklNRU8gPSBNQVRDSF9VUkxfVklNRU87XG52YXIgTUFUQ0hfVVJMX0ZBQ0VCT09LID0gL15odHRwcz86XFwvXFwvKHd3d1xcLik/ZmFjZWJvb2tcXC5jb20uKlxcLyh2aWRlbyhzKT98d2F0Y2h8c3RvcnkpKFxcLnBocD98XFwvKS4rJC87XG5leHBvcnRzLk1BVENIX1VSTF9GQUNFQk9PSyA9IE1BVENIX1VSTF9GQUNFQk9PSztcbnZhciBNQVRDSF9VUkxfRkFDRUJPT0tfV0FUQ0ggPSAvXmh0dHBzPzpcXC9cXC9mYlxcLndhdGNoXFwvLiskLztcbmV4cG9ydHMuTUFUQ0hfVVJMX0ZBQ0VCT09LX1dBVENIID0gTUFUQ0hfVVJMX0ZBQ0VCT09LX1dBVENIO1xudmFyIE1BVENIX1VSTF9TVFJFQU1BQkxFID0gL3N0cmVhbWFibGVcXC5jb21cXC8oW2EtejAtOV0rKSQvO1xuZXhwb3J0cy5NQVRDSF9VUkxfU1RSRUFNQUJMRSA9IE1BVENIX1VSTF9TVFJFQU1BQkxFO1xudmFyIE1BVENIX1VSTF9XSVNUSUEgPSAvKD86d2lzdGlhXFwuKD86Y29tfG5ldCl8d2lcXC5zdClcXC8oPzptZWRpYXN8ZW1iZWQpXFwvKD86aWZyYW1lXFwvKT8oW14/XSspLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1dJU1RJQSA9IE1BVENIX1VSTF9XSVNUSUE7XG52YXIgTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyA9IC8oPzp3d3dcXC58Z29cXC4pP3R3aXRjaFxcLnR2XFwvdmlkZW9zXFwvKFxcZCspKCR8XFw/KS87XG5leHBvcnRzLk1BVENIX1VSTF9UV0lUQ0hfVklERU8gPSBNQVRDSF9VUkxfVFdJVENIX1ZJREVPO1xudmFyIE1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTCA9IC8oPzp3d3dcXC58Z29cXC4pP3R3aXRjaFxcLnR2XFwvKFthLXpBLVowLTlfXSspKCR8XFw/KS87XG5leHBvcnRzLk1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTCA9IE1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTDtcbnZhciBNQVRDSF9VUkxfREFJTFlNT1RJT04gPSAvXig/Oig/Omh0dHBzPyk6KT8oPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86KD86ZGFpbHltb3Rpb25cXC5jb20oPzpcXC9lbWJlZCk/XFwvdmlkZW8pfGRhaVxcLmx5KVxcLyhbYS16QS1aMC05XSspKD86X1tcXHdfLV0rKT8oPzpbXFx3LiNfLV0rKT8vO1xuZXhwb3J0cy5NQVRDSF9VUkxfREFJTFlNT1RJT04gPSBNQVRDSF9VUkxfREFJTFlNT1RJT047XG52YXIgTUFUQ0hfVVJMX01JWENMT1VEID0gL21peGNsb3VkXFwuY29tXFwvKFteL10rXFwvW14vXSspLztcbmV4cG9ydHMuTUFUQ0hfVVJMX01JWENMT1VEID0gTUFUQ0hfVVJMX01JWENMT1VEO1xudmFyIE1BVENIX1VSTF9WSURZQVJEID0gL3ZpZHlhcmQuY29tXFwvKD86d2F0Y2hcXC8pPyhbYS16QS1aMC05LV9dKykvO1xuZXhwb3J0cy5NQVRDSF9VUkxfVklEWUFSRCA9IE1BVENIX1VSTF9WSURZQVJEO1xudmFyIE1BVENIX1VSTF9LQUxUVVJBID0gL15odHRwcz86XFwvXFwvW2EtekEtWl0rXFwua2FsdHVyYS4oY29tfG9yZylcXC9wXFwvKFswLTldKylcXC9zcFxcLyhbMC05XSspMDBcXC9lbWJlZElmcmFtZUpzXFwvdWljb25mX2lkXFwvKFswLTldKylcXC9wYXJ0bmVyX2lkXFwvKFswLTldKykoLiopZW50cnlfaWQuKFthLXpBLVowLTktX10uKikkLztcbmV4cG9ydHMuTUFUQ0hfVVJMX0tBTFRVUkEgPSBNQVRDSF9VUkxfS0FMVFVSQTtcbnZhciBBVURJT19FWFRFTlNJT05TID0gL1xcLihtNGF8bTRifG1wNGF8bXBnYXxtcDJ8bXAyYXxtcDN8bTJhfG0zYXx3YXZ8d2ViYXxhYWN8b2dhfHNweCkoJHxcXD8pL2k7XG5leHBvcnRzLkFVRElPX0VYVEVOU0lPTlMgPSBBVURJT19FWFRFTlNJT05TO1xudmFyIFZJREVPX0VYVEVOU0lPTlMgPSAvXFwuKG1wNHxvZ1tndl18d2VibXxtb3Z8bTR2KSgjdD1bLFxcZCtdKyk/KCR8XFw/KS9pO1xuZXhwb3J0cy5WSURFT19FWFRFTlNJT05TID0gVklERU9fRVhURU5TSU9OUztcbnZhciBITFNfRVhURU5TSU9OUyA9IC9cXC4obTN1OCkoJHxcXD8pL2k7XG5leHBvcnRzLkhMU19FWFRFTlNJT05TID0gSExTX0VYVEVOU0lPTlM7XG52YXIgREFTSF9FWFRFTlNJT05TID0gL1xcLihtcGQpKCR8XFw/KS9pO1xuZXhwb3J0cy5EQVNIX0VYVEVOU0lPTlMgPSBEQVNIX0VYVEVOU0lPTlM7XG52YXIgRkxWX0VYVEVOU0lPTlMgPSAvXFwuKGZsdikoJHxcXD8pL2k7XG5leHBvcnRzLkZMVl9FWFRFTlNJT05TID0gRkxWX0VYVEVOU0lPTlM7XG5cbnZhciBjYW5QbGF5RmlsZSA9IGZ1bmN0aW9uIGNhblBsYXlGaWxlKHVybCkge1xuICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodXJsKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnICYmIGNhblBsYXlGaWxlKGl0ZW0pKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FuUGxheUZpbGUoaXRlbS5zcmMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCgwLCBfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSB8fCAoMCwgX3V0aWxzLmlzQmxvYlVybCkodXJsKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIEFVRElPX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IFZJREVPX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IEhMU19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBEQVNIX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IEZMVl9FWFRFTlNJT05TLnRlc3QodXJsKTtcbn07XG5cbnZhciBjYW5QbGF5ID0ge1xuICB5b3V0dWJlOiBmdW5jdGlvbiB5b3V0dWJlKHVybCkge1xuICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIHVybC5ldmVyeShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gTUFUQ0hfVVJMX1lPVVRVQkUudGVzdChpdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBNQVRDSF9VUkxfWU9VVFVCRS50ZXN0KHVybCk7XG4gIH0sXG4gIHNvdW5kY2xvdWQ6IGZ1bmN0aW9uIHNvdW5kY2xvdWQodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9TT1VORENMT1VELnRlc3QodXJsKSAmJiAhQVVESU9fRVhURU5TSU9OUy50ZXN0KHVybCk7XG4gIH0sXG4gIHZpbWVvOiBmdW5jdGlvbiB2aW1lbyh1cmwpIHtcbiAgICByZXR1cm4gTUFUQ0hfVVJMX1ZJTUVPLnRlc3QodXJsKSAmJiAhVklERU9fRVhURU5TSU9OUy50ZXN0KHVybCkgJiYgIUhMU19FWFRFTlNJT05TLnRlc3QodXJsKTtcbiAgfSxcbiAgZmFjZWJvb2s6IGZ1bmN0aW9uIGZhY2Vib29rKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfRkFDRUJPT0sudGVzdCh1cmwpIHx8IE1BVENIX1VSTF9GQUNFQk9PS19XQVRDSC50ZXN0KHVybCk7XG4gIH0sXG4gIHN0cmVhbWFibGU6IGZ1bmN0aW9uIHN0cmVhbWFibGUodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9TVFJFQU1BQkxFLnRlc3QodXJsKTtcbiAgfSxcbiAgd2lzdGlhOiBmdW5jdGlvbiB3aXN0aWEodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9XSVNUSUEudGVzdCh1cmwpO1xuICB9LFxuICB0d2l0Y2g6IGZ1bmN0aW9uIHR3aXRjaCh1cmwpIHtcbiAgICByZXR1cm4gTUFUQ0hfVVJMX1RXSVRDSF9WSURFTy50ZXN0KHVybCkgfHwgTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMLnRlc3QodXJsKTtcbiAgfSxcbiAgZGFpbHltb3Rpb246IGZ1bmN0aW9uIGRhaWx5bW90aW9uKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfREFJTFlNT1RJT04udGVzdCh1cmwpO1xuICB9LFxuICBtaXhjbG91ZDogZnVuY3Rpb24gbWl4Y2xvdWQodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9NSVhDTE9VRC50ZXN0KHVybCk7XG4gIH0sXG4gIHZpZHlhcmQ6IGZ1bmN0aW9uIHZpZHlhcmQodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9WSURZQVJELnRlc3QodXJsKTtcbiAgfSxcbiAga2FsdHVyYTogZnVuY3Rpb24ga2FsdHVyYSh1cmwpIHtcbiAgICByZXR1cm4gTUFUQ0hfVVJMX0tBTFRVUkEudGVzdCh1cmwpO1xuICB9LFxuICBmaWxlOiBjYW5QbGF5RmlsZVxufTtcbmV4cG9ydHMuY2FuUGxheSA9IGNhblBsYXk7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FuUGxheSIsIkZMVl9FWFRFTlNJT05TIiwiREFTSF9FWFRFTlNJT05TIiwiSExTX0VYVEVOU0lPTlMiLCJWSURFT19FWFRFTlNJT05TIiwiQVVESU9fRVhURU5TSU9OUyIsIk1BVENIX1VSTF9LQUxUVVJBIiwiTUFUQ0hfVVJMX1ZJRFlBUkQiLCJNQVRDSF9VUkxfTUlYQ0xPVUQiLCJNQVRDSF9VUkxfREFJTFlNT1RJT04iLCJNQVRDSF9VUkxfVFdJVENIX0NIQU5ORUwiLCJNQVRDSF9VUkxfVFdJVENIX1ZJREVPIiwiTUFUQ0hfVVJMX1dJU1RJQSIsIk1BVENIX1VSTF9TVFJFQU1BQkxFIiwiTUFUQ0hfVVJMX0ZBQ0VCT09LX1dBVENIIiwiTUFUQ0hfVVJMX0ZBQ0VCT09LIiwiTUFUQ0hfVVJMX1ZJTUVPIiwiTUFUQ0hfVVJMX1NPVU5EQ0xPVUQiLCJNQVRDSF9VUkxfWU9VVFVCRSIsIl91dGlscyIsInJlcXVpcmUiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJsZW5ndGgiLCJpIiwiRiIsInMiLCJuIiwiZG9uZSIsImUiLCJfZSIsImYiLCJUeXBlRXJyb3IiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiZXJyIiwic3RlcCIsIm5leHQiLCJfZTIiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiY2FuUGxheUZpbGUiLCJ1cmwiLCJfaXRlcmF0b3IiLCJfc3RlcCIsIml0ZW0iLCJzcmMiLCJpc01lZGlhU3RyZWFtIiwiaXNCbG9iVXJsIiwieW91dHViZSIsImV2ZXJ5Iiwic291bmRjbG91ZCIsInZpbWVvIiwiZmFjZWJvb2siLCJzdHJlYW1hYmxlIiwid2lzdGlhIiwidHdpdGNoIiwiZGFpbHltb3Rpb24iLCJtaXhjbG91ZCIsInZpZHlhcmQiLCJrYWx0dXJhIiwiZmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/patterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://api.dmcdn.net/all.js\";\nvar SDK_GLOBAL = \"DM\";\nvar SDK_GLOBAL_READY = \"dmAsyncInit\";\nvar DailyMotion = /*#__PURE__*/ function(_Component) {\n    _inherits(DailyMotion, _Component);\n    var _super = _createSuper(DailyMotion);\n    function DailyMotion() {\n        var _this;\n        _classCallCheck(this, DailyMotion);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationChange\", function() {\n            var duration = _this.getDuration();\n            _this.props.onDuration(duration);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(DailyMotion, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError = _this$props.onError, playing = _this$props.playing;\n                var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray(_url$match, 2), id = _url$match2[1];\n                if (this.player) {\n                    this.player.load(id, {\n                        start: (0, _utils.parseStartTime)(url),\n                        autoplay: playing\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {\n                    return DM.player;\n                }).then(function(DM) {\n                    if (!_this2.container) return;\n                    var Player = DM.player;\n                    _this2.player = new Player(_this2.container, {\n                        width: \"100%\",\n                        height: \"100%\",\n                        video: id,\n                        params: _objectSpread({\n                            controls: controls,\n                            autoplay: _this2.props.playing,\n                            mute: _this2.props.muted,\n                            start: (0, _utils.parseStartTime)(url),\n                            origin: window.location.origin\n                        }, config.params),\n                        events: {\n                            apiready: _this2.props.onReady,\n                            seeked: function seeked() {\n                                return _this2.props.onSeek(_this2.player.currentTime);\n                            },\n                            video_end: _this2.props.onEnded,\n                            durationchange: _this2.onDurationChange,\n                            pause: _this2.props.onPause,\n                            playing: _this2.props.onPlay,\n                            waiting: _this2.props.onBuffer,\n                            error: function error(event) {\n                                return onError(event);\n                            }\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.player.duration || null;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.player.bufferedTime;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return DailyMotion;\n}(_react.Component);\nexports[\"default\"] = DailyMotion;\n_defineProperty(DailyMotion, \"displayName\", \"DailyMotion\");\n_defineProperty(DailyMotion, \"canPlay\", _patterns.canPlay.dailymotion);\n_defineProperty(DailyMotion, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://connect.facebook.net/en_US/sdk.js\";\nvar SDK_GLOBAL = \"FB\";\nvar SDK_GLOBAL_READY = \"fbAsyncInit\";\nvar PLAYER_ID_PREFIX = \"facebook-player-\";\nvar Facebook = /*#__PURE__*/ function(_Component) {\n    _inherits(Facebook, _Component);\n    var _super = _createSuper(Facebook);\n    function Facebook() {\n        var _this;\n        _classCallCheck(this, Facebook);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Facebook, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                if (isReady) {\n                    (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                        return FB.XFBML.parse();\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                    FB.init({\n                        appId: _this2.props.config.appId,\n                        xfbml: true,\n                        version: _this2.props.config.version\n                    });\n                    FB.Event.subscribe(\"xfbml.render\", function(msg) {\n                        // Here we know the SDK has loaded, even if onReady/onPlay\n                        // is not called due to a video that cannot be embedded\n                        _this2.props.onLoaded();\n                    });\n                    FB.Event.subscribe(\"xfbml.ready\", function(msg) {\n                        if (msg.type === \"video\" && msg.id === _this2.playerID) {\n                            _this2.player = msg.instance;\n                            _this2.player.subscribe(\"startedPlaying\", _this2.props.onPlay);\n                            _this2.player.subscribe(\"paused\", _this2.props.onPause);\n                            _this2.player.subscribe(\"finishedPlaying\", _this2.props.onEnded);\n                            _this2.player.subscribe(\"startedBuffering\", _this2.props.onBuffer);\n                            _this2.player.subscribe(\"finishedBuffering\", _this2.props.onBufferEnd);\n                            _this2.player.subscribe(\"error\", _this2.props.onError);\n                            if (_this2.props.muted) {\n                                _this2.callPlayer(\"mute\");\n                            } else {\n                                _this2.callPlayer(\"unmute\");\n                            }\n                            _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`\n                            // to the iframe when autoplay fails, so here we set it back\n                            document.getElementById(_this2.playerID).querySelector(\"iframe\").style.visibility = \"visible\";\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentPosition\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var attributes = this.props.config.attributes;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", _extends({\n                    style: style,\n                    id: this.playerID,\n                    className: \"fb-video\",\n                    \"data-href\": this.props.url,\n                    \"data-autoplay\": this.props.playing ? \"true\" : \"false\",\n                    \"data-allowfullscreen\": \"true\",\n                    \"data-controls\": this.props.controls ? \"true\" : \"false\"\n                }, attributes));\n            }\n        }\n    ]);\n    return Facebook;\n}(_react.Component);\nexports[\"default\"] = Facebook;\n_defineProperty(Facebook, \"displayName\", \"Facebook\");\n_defineProperty(Facebook, \"canPlay\", _patterns.canPlay.facebook);\n_defineProperty(Facebook, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Facebook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar HAS_NAVIGATOR = typeof navigator !== \"undefined\";\nvar IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\nvar IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;\nvar IS_SAFARI = HAS_NAVIGATOR && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && !window.MSStream;\nvar HLS_SDK_URL = \"https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js\";\nvar HLS_GLOBAL = \"Hls\";\nvar DASH_SDK_URL = \"https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js\";\nvar DASH_GLOBAL = \"dashjs\";\nvar FLV_SDK_URL = \"https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js\";\nvar FLV_GLOBAL = \"flvjs\";\nvar MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/;\nvar MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/;\nvar REPLACE_CLOUDFLARE_STREAM = \"https://videodelivery.net/{id}/manifest/video.m3u8\";\nvar FilePlayer = /*#__PURE__*/ function(_Component) {\n    _inherits(FilePlayer, _Component);\n    var _super = _createSuper(FilePlayer);\n    function FilePlayer() {\n        var _this;\n        _classCallCheck(this, FilePlayer);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"onReady\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onReady.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBuffer\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBufferEnd\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props6;\n            return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onError\", function() {\n            var _this$props7;\n            return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlayBackRateChange\", function(event) {\n            return _this.props.onPlaybackRateChange(event.target.playbackRate);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnablePIP\", function() {\n            var _this$props8;\n            return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDisablePIP\", function(e) {\n            var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;\n            onDisablePIP(e);\n            if (playing) {\n                _this.play();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPresentationModeChange\", function(e) {\n            if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {\n                var webkitPresentationMode = _this.player.webkitPresentationMode;\n                if (webkitPresentationMode === \"picture-in-picture\") {\n                    _this.onEnablePIP(e);\n                } else if (webkitPresentationMode === \"inline\") {\n                    _this.onDisablePIP(e);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function(e) {\n            _this.props.onSeek(e.target.currentTime);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.player.muted = true;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.player.muted = false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderSourceElement\", function(source, index) {\n            if (typeof source === \"string\") {\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", {\n                    key: index,\n                    src: source\n                });\n            }\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", _extends({\n                key: index\n            }, source));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderTrack\", function(track, index) {\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"track\", _extends({\n                key: index\n            }, track));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(player) {\n            if (_this.player) {\n                // Store previous player to be used by removeListeners()\n                _this.prevPlayer = _this.player;\n            }\n            _this.player = player;\n        });\n        return _this;\n    }\n    _createClass(FilePlayer, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n                this.addListeners(this.player);\n                var src = this.getSource(this.props.url); // Ensure src is set in strict mode\n                if (src) {\n                    this.player.src = src;\n                }\n                if (IS_IOS || this.props.config.forceDisableHls) {\n                    this.player.load();\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n                    this.removeListeners(this.prevPlayer, prevProps.url);\n                    this.addListeners(this.player);\n                }\n                if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url) && !(this.props.url instanceof Array // Avoid infinite loop\n                )) {\n                    this.player.srcObject = null;\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.player.removeAttribute(\"src\");\n                this.removeListeners(this.player);\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners(player) {\n                var _this$props10 = this.props, url = _this$props10.url, playsinline = _this$props10.playsinline;\n                player.addEventListener(\"play\", this.onPlay);\n                player.addEventListener(\"waiting\", this.onBuffer);\n                player.addEventListener(\"playing\", this.onBufferEnd);\n                player.addEventListener(\"pause\", this.onPause);\n                player.addEventListener(\"seeked\", this.onSeek);\n                player.addEventListener(\"ended\", this.onEnded);\n                player.addEventListener(\"error\", this.onError);\n                player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n                player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n                if (!this.shouldUseHLS(url)) {\n                    // onReady is handled by hls.js\n                    player.addEventListener(\"canplay\", this.onReady);\n                }\n                if (playsinline) {\n                    player.setAttribute(\"playsinline\", \"\");\n                    player.setAttribute(\"webkit-playsinline\", \"\");\n                    player.setAttribute(\"x5-playsinline\", \"\");\n                }\n            }\n        },\n        {\n            key: \"removeListeners\",\n            value: function removeListeners(player, url) {\n                player.removeEventListener(\"canplay\", this.onReady);\n                player.removeEventListener(\"play\", this.onPlay);\n                player.removeEventListener(\"waiting\", this.onBuffer);\n                player.removeEventListener(\"playing\", this.onBufferEnd);\n                player.removeEventListener(\"pause\", this.onPause);\n                player.removeEventListener(\"seeked\", this.onSeek);\n                player.removeEventListener(\"ended\", this.onEnded);\n                player.removeEventListener(\"error\", this.onError);\n                player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n                player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.removeEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n                if (!this.shouldUseHLS(url)) {\n                    // onReady is handled by hls.js\n                    player.removeEventListener(\"canplay\", this.onReady);\n                }\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"shouldUseAudio\",\n            value: function shouldUseAudio(props) {\n                if (props.config.forceVideo) {\n                    return false;\n                }\n                if (props.config.attributes.poster) {\n                    return false; // Use <video> so that poster is shown\n                }\n                return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;\n            }\n        },\n        {\n            key: \"shouldUseHLS\",\n            value: function shouldUseHLS(url) {\n                if (IS_SAFARI && this.props.config.forceSafariHLS || this.props.config.forceHLS) {\n                    return true;\n                }\n                if (IS_IOS || this.props.config.forceDisableHls) {\n                    return false;\n                }\n                return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);\n            }\n        },\n        {\n            key: \"shouldUseDASH\",\n            value: function shouldUseDASH(url) {\n                return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;\n            }\n        },\n        {\n            key: \"shouldUseFLV\",\n            value: function shouldUseFLV(url) {\n                return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props$config = this.props.config, hlsVersion = _this$props$config.hlsVersion, hlsOptions = _this$props$config.hlsOptions, dashVersion = _this$props$config.dashVersion, flvVersion = _this$props$config.flvVersion;\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n                if (this.dash) {\n                    this.dash.reset();\n                }\n                if (this.shouldUseHLS(url)) {\n                    (0, _utils.getSDK)(HLS_SDK_URL.replace(\"VERSION\", hlsVersion), HLS_GLOBAL).then(function(Hls) {\n                        _this2.hls = new Hls(hlsOptions);\n                        _this2.hls.on(Hls.Events.MANIFEST_PARSED, function() {\n                            _this2.props.onReady();\n                        });\n                        _this2.hls.on(Hls.Events.ERROR, function(e, data) {\n                            _this2.props.onError(e, data, _this2.hls, Hls);\n                        });\n                        if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n                            var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];\n                            _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace(\"{id}\", id));\n                        } else {\n                            _this2.hls.loadSource(url);\n                        }\n                        _this2.hls.attachMedia(_this2.player);\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (this.shouldUseDASH(url)) {\n                    (0, _utils.getSDK)(DASH_SDK_URL.replace(\"VERSION\", dashVersion), DASH_GLOBAL).then(function(dashjs) {\n                        _this2.dash = dashjs.MediaPlayer().create();\n                        _this2.dash.initialize(_this2.player, url, _this2.props.playing);\n                        _this2.dash.on(\"error\", _this2.props.onError);\n                        if (parseInt(dashVersion) < 3) {\n                            _this2.dash.getDebug().setLogToBrowserConsole(false);\n                        } else {\n                            _this2.dash.updateSettings({\n                                debug: {\n                                    logLevel: dashjs.Debug.LOG_LEVEL_NONE\n                                }\n                            });\n                        }\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (this.shouldUseFLV(url)) {\n                    (0, _utils.getSDK)(FLV_SDK_URL.replace(\"VERSION\", flvVersion), FLV_GLOBAL).then(function(flvjs) {\n                        _this2.flv = flvjs.createPlayer({\n                            type: \"flv\",\n                            url: url\n                        });\n                        _this2.flv.attachMediaElement(_this2.player);\n                        _this2.flv.on(flvjs.Events.ERROR, function(e, data) {\n                            _this2.props.onError(e, data, _this2.flv, flvjs);\n                        });\n                        _this2.flv.load();\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (url instanceof Array) {\n                    // When setting new urls (<source>) on an already loaded video,\n                    // HTMLMediaElement.load() is needed to reset the media element\n                    // and restart the media resource. Just replacing children source\n                    // dom nodes is not enough\n                    this.player.load();\n                } else if ((0, _utils.isMediaStream)(url)) {\n                    try {\n                        this.player.srcObject = url;\n                    } catch (e) {\n                        this.player.src = window.URL.createObjectURL(url);\n                    }\n                }\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.player.play();\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.player.pause();\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.player.removeAttribute(\"src\");\n                if (this.dash) {\n                    this.dash.reset();\n                }\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.player.currentTime = seconds;\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.player.volume = fraction;\n            }\n        },\n        {\n            key: \"enablePIP\",\n            value: function enablePIP() {\n                if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n                    this.player.requestPictureInPicture();\n                } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"picture-in-picture\") {\n                    this.player.webkitSetPresentationMode(\"picture-in-picture\");\n                }\n            }\n        },\n        {\n            key: \"disablePIP\",\n            value: function disablePIP() {\n                if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n                    document.exitPictureInPicture();\n                } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"inline\") {\n                    this.player.webkitSetPresentationMode(\"inline\");\n                }\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                try {\n                    this.player.playbackRate = rate;\n                } catch (error) {\n                    this.props.onError(error);\n                }\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.player) return null;\n                var _this$player = this.player, duration = _this$player.duration, seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration\n                // so instead we use the end of the seekable timerange\n                if (duration === Infinity && seekable.length > 0) {\n                    return seekable.end(seekable.length - 1);\n                }\n                return duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.player) return null;\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.player) return null;\n                var buffered = this.player.buffered;\n                if (buffered.length === 0) {\n                    return 0;\n                }\n                var end = buffered.end(buffered.length - 1);\n                var duration = this.getDuration();\n                if (end > duration) {\n                    return duration;\n                }\n                return end;\n            }\n        },\n        {\n            key: \"getSource\",\n            value: function getSource(url) {\n                var useHLS = this.shouldUseHLS(url);\n                var useDASH = this.shouldUseDASH(url);\n                var useFLV = this.shouldUseFLV(url);\n                if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {\n                    return undefined;\n                }\n                if (MATCH_DROPBOX_URL.test(url)) {\n                    return url.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\");\n                }\n                return url;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props11 = this.props, url = _this$props11.url, playing = _this$props11.playing, loop = _this$props11.loop, controls = _this$props11.controls, muted = _this$props11.muted, config = _this$props11.config, width = _this$props11.width, height = _this$props11.height;\n                var useAudio = this.shouldUseAudio(this.props);\n                var Element = useAudio ? \"audio\" : \"video\";\n                var style = {\n                    width: width === \"auto\" ? width : \"100%\",\n                    height: height === \"auto\" ? height : \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(Element, _extends({\n                    ref: this.ref,\n                    src: this.getSource(url),\n                    style: style,\n                    preload: \"auto\",\n                    autoPlay: playing || undefined,\n                    controls: controls,\n                    muted: muted,\n                    loop: loop\n                }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));\n            }\n        }\n    ]);\n    return FilePlayer;\n}(_react.Component);\nexports[\"default\"] = FilePlayer;\n_defineProperty(FilePlayer, \"displayName\", \"FilePlayer\");\n_defineProperty(FilePlayer, \"canPlay\", _patterns.canPlay.file);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Kaltura.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Kaltura.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nvar SDK_GLOBAL = \"playerjs\";\nvar Kaltura = /*#__PURE__*/ function(_Component) {\n    _inherits(Kaltura, _Component);\n    var _super = _createSuper(Kaltura);\n    function Kaltura() {\n        var _this;\n        _classCallCheck(this, Kaltura);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Kaltura, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {\n                    if (!_this2.iframe) return;\n                    _this2.player = new playerjs.Player(_this2.iframe);\n                    _this2.player.on(\"ready\", function() {\n                        // An arbitrary timeout is required otherwise\n                        // the event listeners won’t work\n                        setTimeout(function() {\n                            _this2.player.isReady = true;\n                            _this2.player.setLoop(_this2.props.loop);\n                            if (_this2.props.muted) {\n                                _this2.player.mute();\n                            }\n                            _this2.addListeners(_this2.player, _this2.props);\n                            _this2.props.onReady();\n                        }, 500);\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners(player, props) {\n                var _this3 = this;\n                player.on(\"play\", props.onPlay);\n                player.on(\"pause\", props.onPause);\n                player.on(\"ended\", props.onEnded);\n                player.on(\"error\", props.onError);\n                player.on(\"timeupdate\", function(_ref) {\n                    var duration = _ref.duration, seconds = _ref.seconds;\n                    _this3.duration = duration;\n                    _this3.currentTime = seconds;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: this.props.url,\n                    frameBorder: \"0\",\n                    scrolling: \"no\",\n                    style: style,\n                    allow: \"encrypted-media; autoplay; fullscreen;\",\n                    referrerPolicy: \"no-referrer-when-downgrade\"\n                });\n            }\n        }\n    ]);\n    return Kaltura;\n}(_react.Component);\nexports[\"default\"] = Kaltura;\n_defineProperty(Kaltura, \"displayName\", \"Kaltura\");\n_defineProperty(Kaltura, \"canPlay\", _patterns.canPlay.kaltura);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Kaltura.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://widget.mixcloud.com/media/js/widgetApi.js\";\nvar SDK_GLOBAL = \"Mixcloud\";\nvar Mixcloud = /*#__PURE__*/ function(_Component) {\n    _inherits(Mixcloud, _Component);\n    var _super = _createSuper(Mixcloud);\n    function Mixcloud() {\n        var _this;\n        _classCallCheck(this, Mixcloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Mixcloud, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud) {\n                    _this2.player = Mixcloud.PlayerWidget(_this2.iframe);\n                    _this2.player.ready.then(function() {\n                        _this2.player.events.play.on(_this2.props.onPlay);\n                        _this2.player.events.pause.on(_this2.props.onPause);\n                        _this2.player.events.ended.on(_this2.props.onEnded);\n                        _this2.player.events.error.on(_this2.props.error);\n                        _this2.player.events.progress.on(function(seconds, duration) {\n                            _this2.currentTime = seconds;\n                            _this2.duration = duration;\n                        });\n                        _this2.props.onReady();\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {}\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, url = _this$props.url, config = _this$props.config;\n                var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                var query = (0, _utils.queryString)(_objectSpread(_objectSpread({}, config.options), {}, {\n                    feed: \"/\".concat(id, \"/\")\n                })); // We have to give the iframe a key here to prevent a\n                // weird dialog appearing when loading a new track\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    key: id,\n                    ref: this.ref,\n                    style: style,\n                    src: \"https://www.mixcloud.com/widget/iframe/?\".concat(query),\n                    frameBorder: \"0\",\n                    allow: \"autoplay\"\n                });\n            }\n        }\n    ]);\n    return Mixcloud;\n}(_react.Component);\nexports[\"default\"] = Mixcloud;\n_defineProperty(Mixcloud, \"displayName\", \"Mixcloud\");\n_defineProperty(Mixcloud, \"canPlay\", _patterns.canPlay.mixcloud);\n_defineProperty(Mixcloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nvar SDK_GLOBAL = \"SC\";\nvar SoundCloud = /*#__PURE__*/ function(_Component) {\n    _inherits(SoundCloud, _Component);\n    var _super = _createSuper(SoundCloud);\n    function SoundCloud() {\n        var _this;\n        _classCallCheck(this, SoundCloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"fractionLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(SoundCloud, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {\n                    if (!_this2.iframe) return;\n                    var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;\n                    if (!isReady) {\n                        _this2.player = SC.Widget(_this2.iframe);\n                        _this2.player.bind(PLAY, _this2.props.onPlay);\n                        _this2.player.bind(PAUSE, function() {\n                            var remaining = _this2.duration - _this2.currentTime;\n                            if (remaining < 0.05) {\n                                // Prevent onPause firing right before onEnded\n                                return;\n                            }\n                            _this2.props.onPause();\n                        });\n                        _this2.player.bind(PLAY_PROGRESS, function(e) {\n                            _this2.currentTime = e.currentPosition / 1000;\n                            _this2.fractionLoaded = e.loadedProgress;\n                        });\n                        _this2.player.bind(FINISH, function() {\n                            return _this2.props.onEnded();\n                        });\n                        _this2.player.bind(ERROR, function(e) {\n                            return _this2.props.onError(e);\n                        });\n                    }\n                    _this2.player.load(url, _objectSpread(_objectSpread({}, _this2.props.config.options), {}, {\n                        callback: function callback() {\n                            _this2.player.getDuration(function(duration) {\n                                _this2.duration = duration / 1000;\n                                _this2.props.onReady();\n                            });\n                        }\n                    }));\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seekTo\", seconds * 1000);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.fractionLoaded * this.duration;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://w.soundcloud.com/player/?url=\".concat(encodeURIComponent(this.props.url)),\n                    style: style,\n                    frameBorder: 0,\n                    allow: \"autoplay\"\n                });\n            }\n        }\n    ]);\n    return SoundCloud;\n}(_react.Component);\nexports[\"default\"] = SoundCloud;\n_defineProperty(SoundCloud, \"displayName\", \"SoundCloud\");\n_defineProperty(SoundCloud, \"canPlay\", _patterns.canPlay.soundcloud);\n_defineProperty(SoundCloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nvar SDK_GLOBAL = \"playerjs\";\nvar Streamable = /*#__PURE__*/ function(_Component) {\n    _inherits(Streamable, _Component);\n    var _super = _createSuper(Streamable);\n    function Streamable() {\n        var _this;\n        _classCallCheck(this, Streamable);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Streamable, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {\n                    if (!_this2.iframe) return;\n                    _this2.player = new playerjs.Player(_this2.iframe);\n                    _this2.player.setLoop(_this2.props.loop);\n                    _this2.player.on(\"ready\", _this2.props.onReady);\n                    _this2.player.on(\"play\", _this2.props.onPlay);\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", _this2.props.onSeek);\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var duration = _ref.duration, seconds = _ref.seconds;\n                        _this2.duration = duration;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"buffered\", function(_ref2) {\n                        var percent = _ref2.percent;\n                        if (_this2.duration) {\n                            _this2.secondsLoaded = _this2.duration * percent;\n                        }\n                    });\n                    if (_this2.props.muted) {\n                        _this2.player.mute();\n                    }\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://streamable.com/o/\".concat(id),\n                    frameBorder: \"0\",\n                    scrolling: \"no\",\n                    style: style,\n                    allow: \"encrypted-media; autoplay; fullscreen;\"\n                });\n            }\n        }\n    ]);\n    return Streamable;\n}(_react.Component);\nexports[\"default\"] = Streamable;\n_defineProperty(Streamable, \"displayName\", \"Streamable\");\n_defineProperty(Streamable, \"canPlay\", _patterns.canPlay.streamable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Streamable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nvar SDK_GLOBAL = \"Twitch\";\nvar PLAYER_ID_PREFIX = \"twitch-player-\";\nvar Twitch = /*#__PURE__*/ function(_Component) {\n    _inherits(Twitch, _Component);\n    var _super = _createSuper(Twitch);\n    function Twitch() {\n        var _this;\n        _classCallCheck(this, Twitch);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        return _this;\n    }\n    _createClass(Twitch, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props = this.props, playsinline = _this$props.playsinline, onError = _this$props.onError, config = _this$props.config, controls = _this$props.controls;\n                var isChannel = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\n                var id = isChannel ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];\n                if (isReady) {\n                    if (isChannel) {\n                        this.player.setChannel(id);\n                    } else {\n                        this.player.setVideo(\"v\" + id);\n                    }\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch) {\n                    _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({\n                        video: isChannel ? \"\" : id,\n                        channel: isChannel ? id : \"\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        playsinline: playsinline,\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                        controls: isChannel ? true : controls,\n                        time: (0, _utils.parseStartTime)(url)\n                    }, config.options));\n                    var _Twitch$Player = Twitch.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE, SEEK = _Twitch$Player.SEEK;\n                    _this2.player.addEventListener(READY, _this2.props.onReady);\n                    _this2.player.addEventListener(PLAYING, _this2.props.onPlay);\n                    _this2.player.addEventListener(PAUSE, _this2.props.onPause);\n                    _this2.player.addEventListener(ENDED, _this2.props.onEnded);\n                    _this2.player.addEventListener(SEEK, _this2.props.onSeek); // Prevent weird isLoading behaviour when streams are offline\n                    _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);\n                    _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style,\n                    id: this.playerID\n                });\n            }\n        }\n    ]);\n    return Twitch;\n}(_react.Component);\nexports[\"default\"] = Twitch;\n_defineProperty(Twitch, \"displayName\", \"Twitch\");\n_defineProperty(Twitch, \"canPlay\", _patterns.canPlay.twitch);\n_defineProperty(Twitch, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Twitch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nvar SDK_GLOBAL = \"VidyardV4\";\nvar SDK_GLOBAL_READY = \"onVidyardAPI\";\nvar Vidyard = /*#__PURE__*/ function(_Component) {\n    _inherits(Vidyard, _Component);\n    var _super = _createSuper(Vidyard);\n    function Vidyard() {\n        var _this;\n        _classCallCheck(this, Vidyard);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vidyard, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError = _this$props.onError, onDuration = _this$props.onDuration;\n                var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];\n                if (this.player) {\n                    this.stop();\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard) {\n                    if (!_this2.container) return;\n                    Vidyard.api.addReadyListener(function(data, player) {\n                        if (_this2.player) {\n                            return;\n                        }\n                        _this2.player = player;\n                        _this2.player.on(\"ready\", _this2.props.onReady);\n                        _this2.player.on(\"play\", _this2.props.onPlay);\n                        _this2.player.on(\"pause\", _this2.props.onPause);\n                        _this2.player.on(\"seek\", _this2.props.onSeek);\n                        _this2.player.on(\"playerComplete\", _this2.props.onEnded);\n                    }, id);\n                    Vidyard.api.renderPlayer(_objectSpread({\n                        uuid: id,\n                        container: _this2.container,\n                        autoplay: playing ? 1 : 0\n                    }, config.options));\n                    Vidyard.api.getPlayerMetadata(id).then(function(meta) {\n                        _this2.duration = meta.length_in_seconds;\n                        onDuration(meta.length_in_seconds);\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                window.VidyardV4.api.destroyPlayer(this.player);\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", amount);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackSpeed\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"currentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return Vidyard;\n}(_react.Component);\nexports[\"default\"] = Vidyard;\n_defineProperty(Vidyard, \"displayName\", \"Vidyard\");\n_defineProperty(Vidyard, \"canPlay\", _patterns.canPlay.vidyard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1ZpZHlhcmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixTQUFTQSxRQUFRQyxHQUFHO0lBQUk7SUFBMkIsSUFBSSxPQUFPQyxXQUFXLGNBQWMsT0FBT0EsT0FBT0MsUUFBUSxLQUFLLFVBQVU7UUFBRUgsVUFBVSxTQUFTQSxRQUFRQyxHQUFHO1lBQUksT0FBTyxPQUFPQTtRQUFLO0lBQUcsT0FBTztRQUFFRCxVQUFVLFNBQVNBLFFBQVFDLEdBQUc7WUFBSSxPQUFPQSxPQUFPLE9BQU9DLFdBQVcsY0FBY0QsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtRQUFLO0lBQUc7SUFBRSxPQUFPRCxRQUFRQztBQUFNO0FBRXpYSyw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxTQUFTQyx3QkFBd0JDLG1CQUFPQSxDQUFDLHdHQUFPO0FBRXBELElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLGdFQUFVO0FBRS9CLElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDLHNFQUFhO0FBRXJDLFNBQVNHO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQixTQUFTQTtRQUE2QixPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUVqTixTQUFTTix3QkFBd0JWLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJaUIsVUFBVSxFQUFFO1FBQUUsT0FBT2pCO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVFELFFBQVFDLFNBQVMsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUUsV0FBV0E7UUFBSTtJQUFHO0lBQUUsSUFBSWdCLFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1FLEdBQUcsQ0FBQ2xCLE1B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QW9CaUQ7WUFDdEM7UUFDRjtRQUFHO1lBQ0RqSSxLQUFLO1lBQ0xmLE9BQU8sU0FBU2lKO2dCQUNkLE9BQU8sSUFBSSxDQUFDZCxRQUFRO1lBQ3RCO1FBQ0Y7UUFBRztZQUNEcEgsS0FBSztZQUNMZixPQUFPLFNBQVNrSjtnQkFDZCxPQUFPLElBQUksQ0FBQ25ELFVBQVUsQ0FBQztZQUN6QjtRQUNGO1FBQUc7WUFDRGhGLEtBQUs7WUFDTGYsT0FBTyxTQUFTbUo7Z0JBQ2QsT0FBTztZQUNUO1FBQ0Y7UUFBRztZQUNEcEksS0FBSztZQUNMZixPQUFPLFNBQVNvSjtnQkFDZCxJQUFJQyxVQUFVLElBQUksQ0FBQ3ZHLEtBQUssQ0FBQ3VHLE9BQU87Z0JBQ2hDLElBQUlDLFFBQVE7b0JBQ1ZDLE9BQU87b0JBQ1BDLFFBQVE7b0JBQ1JILFNBQVNBO2dCQUNYO2dCQUNBLE9BQU8sV0FBVyxHQUFFcEosTUFBTSxDQUFDLFVBQVUsQ0FBQ3dKLGFBQWEsQ0FBQyxPQUFPO29CQUN6REgsT0FBT0E7Z0JBQ1QsR0FBRyxXQUFXLEdBQUVySixNQUFNLENBQUMsVUFBVSxDQUFDd0osYUFBYSxDQUFDLE9BQU87b0JBQ3JEQyxLQUFLLElBQUksQ0FBQ0EsR0FBRztnQkFDZjtZQUNGO1FBQ0Y7S0FBRTtJQUVGLE9BQU9wRTtBQUNULEVBQUVyRixPQUFPMEosU0FBUztBQUVsQjVKLGtCQUFrQixHQUFHdUY7QUFFckJoRCxnQkFBZ0JnRCxTQUFTLGVBQWU7QUFFeENoRCxnQkFBZ0JnRCxTQUFTLFdBQVdqRixVQUFVdUosT0FBTyxDQUFDQyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWlucXVpcnktcm9vbS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvVmlkeWFyZC5qcz8xZGMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU0RLX1VSTCA9ICdodHRwczovL3BsYXkudmlkeWFyZC5jb20vZW1iZWQvdjQuanMnO1xudmFyIFNES19HTE9CQUwgPSAnVmlkeWFyZFY0JztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ29uVmlkeWFyZEFQSSc7XG5cbnZhciBWaWR5YXJkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaWR5YXJkLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZpZHlhcmQpO1xuXG4gIGZ1bmN0aW9uIFZpZHlhcmQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZHlhcmQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFZvbHVtZSgwKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpZHlhcmQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGxheWluZyA9IF90aGlzJHByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgY29uZmlnID0gX3RoaXMkcHJvcHMuY29uZmlnLFxuICAgICAgICAgIG9uRXJyb3IgPSBfdGhpcyRwcm9wcy5vbkVycm9yLFxuICAgICAgICAgIG9uRHVyYXRpb24gPSBfdGhpcyRwcm9wcy5vbkR1cmF0aW9uO1xuICAgICAgdmFyIGlkID0gdXJsICYmIHVybC5tYXRjaChfcGF0dGVybnMuTUFUQ0hfVVJMX1ZJRFlBUkQpWzFdO1xuXG4gICAgICBpZiAodGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZKS50aGVuKGZ1bmN0aW9uIChWaWR5YXJkKSB7XG4gICAgICAgIGlmICghX3RoaXMyLmNvbnRhaW5lcikgcmV0dXJuO1xuICAgICAgICBWaWR5YXJkLmFwaS5hZGRSZWFkeUxpc3RlbmVyKGZ1bmN0aW9uIChkYXRhLCBwbGF5ZXIpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyLnBsYXllcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLm9uKCdyZWFkeScsIF90aGlzMi5wcm9wcy5vblJlYWR5KTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BsYXknLCBfdGhpczIucHJvcHMub25QbGF5KTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BhdXNlJywgX3RoaXMyLnByb3BzLm9uUGF1c2UpO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5vbignc2VlaycsIF90aGlzMi5wcm9wcy5vblNlZWspO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGxheWVyQ29tcGxldGUnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgIH0sIGlkKTtcbiAgICAgICAgVmlkeWFyZC5hcGkucmVuZGVyUGxheWVyKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHV1aWQ6IGlkLFxuICAgICAgICAgIGNvbnRhaW5lcjogX3RoaXMyLmNvbnRhaW5lcixcbiAgICAgICAgICBhdXRvcGxheTogcGxheWluZyA/IDEgOiAwXG4gICAgICAgIH0sIGNvbmZpZy5vcHRpb25zKSk7XG4gICAgICAgIFZpZHlhcmQuYXBpLmdldFBsYXllck1ldGFkYXRhKGlkKS50aGVuKGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICAgICAgX3RoaXMyLmR1cmF0aW9uID0gbWV0YS5sZW5ndGhfaW5fc2Vjb25kcztcbiAgICAgICAgICBvbkR1cmF0aW9uKG1ldGEubGVuZ3RoX2luX3NlY29uZHMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIG9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHdpbmRvdy5WaWR5YXJkVjQuYXBpLmRlc3Ryb3lQbGF5ZXIodGhpcy5wbGF5ZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCkge1xuICAgICAgdmFyIGtlZXBQbGF5aW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrJywgYW1vdW50KTtcblxuICAgICAgaWYgKCFrZWVwUGxheWluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tTcGVlZCcsIHJhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2N1cnJlbnRUaW1lJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlY29uZHNMb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRpc3BsYXkgPSB0aGlzLnByb3BzLmRpc3BsYXk7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBkaXNwbGF5OiBkaXNwbGF5XG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMucmVmXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZHlhcmQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFZpZHlhcmQ7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWR5YXJkLCBcImRpc3BsYXlOYW1lXCIsICdWaWR5YXJkJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWR5YXJkLCBcImNhblBsYXlcIiwgX3BhdHRlcm5zLmNhblBsYXkudmlkeWFyZCk7Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfcGF0dGVybnMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsInJlc3VsdCIsIk5ld1RhcmdldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwidG9TdHJpbmciLCJlIiwiZ2V0UHJvdG90eXBlT2YiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsIlNES19HTE9CQUxfUkVBRFkiLCJWaWR5YXJkIiwiX0NvbXBvbmVudCIsIl9zdXBlciIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJjYWxsUGxheWVyIiwic2V0Vm9sdW1lIiwidm9sdW1lIiwiY29udGFpbmVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJvbk1vdW50IiwibG9hZCIsInVybCIsIl90aGlzMiIsIl90aGlzJHByb3BzIiwicGxheWluZyIsImNvbmZpZyIsIm9uRXJyb3IiLCJvbkR1cmF0aW9uIiwiaWQiLCJtYXRjaCIsIk1BVENIX1VSTF9WSURZQVJEIiwicGxheWVyIiwic3RvcCIsImdldFNESyIsInRoZW4iLCJhcGkiLCJhZGRSZWFkeUxpc3RlbmVyIiwiZGF0YSIsIm9uIiwib25SZWFkeSIsIm9uUGxheSIsIm9uUGF1c2UiLCJvblNlZWsiLCJvbkVuZGVkIiwicmVuZGVyUGxheWVyIiwidXVpZCIsImF1dG9wbGF5Iiwib3B0aW9ucyIsImdldFBsYXllck1ldGFkYXRhIiwibWV0YSIsImR1cmF0aW9uIiwibGVuZ3RoX2luX3NlY29uZHMiLCJwbGF5IiwicGF1c2UiLCJ3aW5kb3ciLCJWaWR5YXJkVjQiLCJkZXN0cm95UGxheWVyIiwic2Vla1RvIiwiYW1vdW50Iiwia2VlcFBsYXlpbmciLCJ1bmRlZmluZWQiLCJmcmFjdGlvbiIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsInJlbmRlciIsImRpc3BsYXkiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlRWxlbWVudCIsInJlZiIsIkNvbXBvbmVudCIsImNhblBsYXkiLCJ2aWR5YXJkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vidyard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.vimeo.com/api/player.js\";\nvar SDK_GLOBAL = \"Vimeo\";\nvar cleanUrl = function cleanUrl(url) {\n    return url.replace(\"/manage/videos\", \"\");\n};\nvar Vimeo = /*#__PURE__*/ function(_Component) {\n    _inherits(Vimeo, _Component);\n    var _super = _createSuper(Vimeo);\n    function Vimeo() {\n        var _this;\n        _classCallCheck(this, Vimeo);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setMuted(true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.setMuted(false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vimeo, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                this.duration = null;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo) {\n                    if (!_this2.container) return;\n                    var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;\n                    _this2.player = new Vimeo.Player(_this2.container, _objectSpread({\n                        url: cleanUrl(url),\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        loop: _this2.props.loop,\n                        playsinline: _this2.props.playsinline,\n                        controls: _this2.props.controls\n                    }, playerOptions));\n                    _this2.player.ready().then(function() {\n                        var iframe = _this2.container.querySelector(\"iframe\");\n                        iframe.style.width = \"100%\";\n                        iframe.style.height = \"100%\";\n                        if (title) {\n                            iframe.title = title;\n                        }\n                    })[\"catch\"](_this2.props.onError);\n                    _this2.player.on(\"loaded\", function() {\n                        _this2.props.onReady();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"play\", function() {\n                        _this2.props.onPlay();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", function(e) {\n                        return _this2.props.onSeek(e.seconds);\n                    });\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var seconds = _ref.seconds;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"progress\", function(_ref2) {\n                        var seconds = _ref2.seconds;\n                        _this2.secondsLoaded = seconds;\n                    });\n                    _this2.player.on(\"bufferstart\", _this2.props.onBuffer);\n                    _this2.player.on(\"bufferend\", _this2.props.onBufferEnd);\n                    _this2.player.on(\"playbackratechange\", function(e) {\n                        return _this2.props.onPlaybackRateChange(e.playbackRate);\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"refreshDuration\",\n            value: function refreshDuration() {\n                var _this3 = this;\n                this.player.getDuration().then(function(duration) {\n                    _this3.duration = duration;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.callPlayer(\"play\");\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"unload\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setMuted\",\n            value: function setMuted(muted) {\n                this.callPlayer(\"setMuted\", muted);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    overflow: \"hidden\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    key: this.props.url,\n                    ref: this.ref,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Vimeo;\n}(_react.Component);\nexports[\"default\"] = Vimeo;\n_defineProperty(Vimeo, \"displayName\", \"Vimeo\");\n_defineProperty(Vimeo, \"canPlay\", _patterns.canPlay.vimeo);\n_defineProperty(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vimeo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nvar SDK_GLOBAL = \"Wistia\";\nvar PLAYER_ID_PREFIX = \"wistia-player-\";\nvar Wistia = /*#__PURE__*/ function(_Component) {\n    _inherits(Wistia, _Component);\n    var _super = _createSuper(Wistia);\n    function Wistia() {\n        var _this;\n        _classCallCheck(this, Wistia);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onPlay.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlaybackRateChange\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Wistia, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError = _this$props6.onError;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia) {\n                    if (config.customControls) {\n                        config.customControls.forEach(function(control) {\n                            return Wistia.defineControl(control);\n                        });\n                    }\n                    window._wq = window._wq || [];\n                    window._wq.push({\n                        id: _this2.playerID,\n                        options: _objectSpread({\n                            autoPlay: playing,\n                            silentAutoPlay: \"allow\",\n                            muted: muted,\n                            controlsVisibleOnLoad: controls,\n                            fullscreenButton: controls,\n                            playbar: controls,\n                            playbackRateControl: controls,\n                            qualityControl: controls,\n                            volumeControl: controls,\n                            settingsControl: controls,\n                            smallPlayButton: controls\n                        }, config.options),\n                        onReady: function onReady(player) {\n                            _this2.player = player;\n                            _this2.unbind();\n                            _this2.player.bind(\"play\", _this2.onPlay);\n                            _this2.player.bind(\"pause\", _this2.onPause);\n                            _this2.player.bind(\"seek\", _this2.onSeek);\n                            _this2.player.bind(\"end\", _this2.onEnded);\n                            _this2.player.bind(\"playbackratechange\", _this2.onPlaybackRateChange);\n                            _onReady();\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"unbind\",\n            value: function unbind() {\n                this.player.unbind(\"play\", this.onPlay);\n                this.player.unbind(\"pause\", this.onPause);\n                this.player.unbind(\"seek\", this.onSeek);\n                this.player.unbind(\"end\", this.onEnded);\n                this.player.unbind(\"playbackratechange\", this.onPlaybackRateChange);\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.unbind();\n                this.callPlayer(\"remove\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"time\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"volume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"playbackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"duration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"time\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var url = this.props.url;\n                var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];\n                var className = \"wistia_embed wistia_async_\".concat(videoID);\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    id: this.playerID,\n                    key: videoID,\n                    className: className,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Wistia;\n}(_react.Component);\nexports[\"default\"] = Wistia;\n_defineProperty(Wistia, \"displayName\", \"Wistia\");\n_defineProperty(Wistia, \"canPlay\", _patterns.canPlay.wistia);\n_defineProperty(Wistia, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Wistia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://www.youtube.com/iframe_api\";\nvar SDK_GLOBAL = \"YT\";\nvar SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nvar MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nvar MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nvar MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nvar NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nvar YouTube = /*#__PURE__*/ function(_Component) {\n    _inherits(YouTube, _Component);\n    var _super = _createSuper(YouTube);\n    function YouTube() {\n        var _this;\n        _classCallCheck(this, YouTube);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"parsePlaylist\", function(url) {\n            if (url instanceof Array) {\n                return {\n                    listType: \"playlist\",\n                    playlist: url.map(_this.getID).join(\",\")\n                };\n            }\n            if (MATCH_PLAYLIST.test(url)) {\n                var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray(_url$match, 2), playlistId = _url$match2[1];\n                return {\n                    listType: \"playlist\",\n                    list: playlistId.replace(/^UC/, \"UU\")\n                };\n            }\n            if (MATCH_USER_UPLOADS.test(url)) {\n                var _url$match3 = url.match(MATCH_USER_UPLOADS), _url$match4 = _slicedToArray(_url$match3, 2), username = _url$match4[1];\n                return {\n                    listType: \"user_uploads\",\n                    list: username\n                };\n            }\n            return {};\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function(event) {\n            var data = event.data;\n            var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop, _this$props$config = _this$props.config, playerVars = _this$props$config.playerVars, onUnstarted = _this$props$config.onUnstarted;\n            var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;\n            if (data === UNSTARTED) onUnstarted();\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                var isPlaylist = !!_this.callPlayer(\"getPlaylist\"); // Only loop manually if not playing a playlist\n                if (loop && !isPlaylist) {\n                    if (playerVars.start) {\n                        _this.seekTo(playerVars.start);\n                    } else {\n                        _this.play();\n                    }\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unMute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(YouTube, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"getID\",\n            value: function getID(url) {\n                if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n                    return null;\n                }\n                return url.match(_patterns.MATCH_URL_YOUTUBE)[1];\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;\n                var playerVars = config.playerVars, embedOptions = config.embedOptions;\n                var id = this.getID(url);\n                if (isReady) {\n                    if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n                        this.player.loadPlaylist(this.parsePlaylist(url));\n                        return;\n                    }\n                    this.player.cueVideoById({\n                        videoId: id,\n                        startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,\n                        endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {\n                    return YT.loaded;\n                }).then(function(YT) {\n                    if (!_this2.container) return;\n                    _this2.player = new YT.Player(_this2.container, _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        videoId: id,\n                        playerVars: _objectSpread(_objectSpread({\n                            autoplay: playing ? 1 : 0,\n                            mute: muted ? 1 : 0,\n                            controls: controls ? 1 : 0,\n                            start: (0, _utils.parseStartTime)(url),\n                            end: (0, _utils.parseEndTime)(url),\n                            origin: window.location.origin,\n                            playsinline: playsinline ? 1 : 0\n                        }, _this2.parsePlaylist(url)), playerVars),\n                        events: {\n                            onReady: function onReady() {\n                                if (loop) {\n                                    _this2.player.setLoop(true); // Enable playlist looping\n                                }\n                                _this2.props.onReady();\n                            },\n                            onPlaybackRateChange: function onPlaybackRateChange(event) {\n                                return _this2.props.onPlaybackRateChange(event.data);\n                            },\n                            onPlaybackQualityChange: function onPlaybackQualityChange(event) {\n                                return _this2.props.onPlaybackQualityChange(event);\n                            },\n                            onStateChange: _this2.onStateChange,\n                            onError: function onError(event) {\n                                return _onError(event.data);\n                            }\n                        },\n                        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined\n                    }, embedOptions));\n                }, _onError);\n                if (embedOptions.events) {\n                    console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause\");\n                }\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"playVideo\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pauseVideo\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n                this.callPlayer(\"stopVideo\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                this.callPlayer(\"seekTo\", amount);\n                if (!keepPlaying && !this.props.playing) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return YouTube;\n}(_react.Component);\nexports[\"default\"] = YouTube;\n_defineProperty(YouTube, \"displayName\", \"YouTube\");\n_defineProperty(YouTube, \"canPlay\", _patterns.canPlay.youtube);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar _default = [\n    {\n        key: \"youtube\",\n        name: \"YouTube\",\n        canPlay: _patterns.canPlay.youtube,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\"));\n            });\n        })\n    },\n    {\n        key: \"soundcloud\",\n        name: \"SoundCloud\",\n        canPlay: _patterns.canPlay.soundcloud,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\"));\n            });\n        })\n    },\n    {\n        key: \"vimeo\",\n        name: \"Vimeo\",\n        canPlay: _patterns.canPlay.vimeo,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\"));\n            });\n        })\n    },\n    {\n        key: \"facebook\",\n        name: \"Facebook\",\n        canPlay: _patterns.canPlay.facebook,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\"));\n            });\n        })\n    },\n    {\n        key: \"streamable\",\n        name: \"Streamable\",\n        canPlay: _patterns.canPlay.streamable,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\"));\n            });\n        })\n    },\n    {\n        key: \"wistia\",\n        name: \"Wistia\",\n        canPlay: _patterns.canPlay.wistia,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\"));\n            });\n        })\n    },\n    {\n        key: \"twitch\",\n        name: \"Twitch\",\n        canPlay: _patterns.canPlay.twitch,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\"));\n            });\n        })\n    },\n    {\n        key: \"dailymotion\",\n        name: \"DailyMotion\",\n        canPlay: _patterns.canPlay.dailymotion,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\"));\n            });\n        })\n    },\n    {\n        key: \"mixcloud\",\n        name: \"Mixcloud\",\n        canPlay: _patterns.canPlay.mixcloud,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\"));\n            });\n        })\n    },\n    {\n        key: \"vidyard\",\n        name: \"Vidyard\",\n        canPlay: _patterns.canPlay.vidyard,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Vidyard */ \"(ssr)/./node_modules/react-player/lib/players/Vidyard.js\"));\n            });\n        })\n    },\n    {\n        key: \"kaltura\",\n        name: \"Kaltura\",\n        canPlay: _patterns.canPlay.kaltura,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Kaltura */ \"(ssr)/./node_modules/react-player/lib/players/Kaltura.js\"));\n            });\n        })\n    },\n    {\n        key: \"file\",\n        name: \"FilePlayer\",\n        canPlay: _patterns.canPlay.file,\n        canEnablePIP: function canEnablePIP(url) {\n            return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);\n        },\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\"));\n            });\n        })\n    }\n];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultProps = exports.propTypes = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar string = _propTypes[\"default\"].string, bool = _propTypes[\"default\"].bool, number = _propTypes[\"default\"].number, array = _propTypes[\"default\"].array, oneOfType = _propTypes[\"default\"].oneOfType, shape = _propTypes[\"default\"].shape, object = _propTypes[\"default\"].object, func = _propTypes[\"default\"].func, node = _propTypes[\"default\"].node;\nvar propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nexports.propTypes = propTypes;\nvar noop = function noop() {};\nvar defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1000,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\nexports.defaultProps = defaultProps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseStartTime = parseStartTime;\nexports.parseEndTime = parseEndTime;\nexports.randomString = randomString;\nexports.queryString = queryString;\nexports.getSDK = getSDK;\nexports.getConfig = getConfig;\nexports.omit = omit;\nexports.callPlayer = callPlayer;\nexports.isMediaStream = isMediaStream;\nexports.isBlobUrl = isBlobUrl;\nexports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;\nvar _loadScript = _interopRequireDefault(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nvar MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nvar MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nvar MATCH_NUMERIC = /^\\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s\n// and return the start time in seconds\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return undefined;\n    }\n    var match = url.match(pattern);\n    if (match) {\n        var stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return undefined;\n}\nfunction parseTimeString(stamp) {\n    var seconds = 0;\n    var array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        var _array = array, _array2 = _slicedToArray(_array, 3), count = _array2[1], period = _array2[2];\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n} // http://stackoverflow.com/a/38622545\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map(function(key) {\n        return \"\".concat(key, \"=\").concat(object[key]);\n    }).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n} // Util function to load an external SDK\n// or return the SDK if it is already loaded\nvar requests = {};\nfunction getSDK(url, sdkGlobal) {\n    var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function() {\n        return true;\n    };\n    var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript[\"default\"];\n    var existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise(function(resolve, reject) {\n        // If we are already loading the SDK, add the resolve and reject\n        // functions to the existing array of requests\n        if (requests[url]) {\n            requests[url].push({\n                resolve: resolve,\n                reject: reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve: resolve,\n                reject: reject\n            }\n        ];\n        var onLoaded = function onLoaded(sdk) {\n            // When loaded, resolve all pending request promises\n            requests[url].forEach(function(request) {\n                return request.resolve(sdk);\n            });\n        };\n        if (sdkReady) {\n            var previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, function(err) {\n            if (err) {\n                // Loading the SDK failed – reject all requests and\n                // reset the array of requests for this SDK\n                requests[url].forEach(function(request) {\n                    return request.reject(err);\n                });\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n}\nfunction getConfig(props, defaultProps) {\n    return (0, _deepmerge[\"default\"])(defaultProps.config, props.config);\n}\nfunction omit(object) {\n    var _ref;\n    for(var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arrays[_key - 1] = arguments[_key];\n    }\n    var omitKeys = (_ref = []).concat.apply(_ref, arrays);\n    var output = {};\n    var keys = Object.keys(object);\n    for(var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++){\n        var key = _keys[_i2];\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method) {\n    var _this$player;\n    // Util method for calling a method on this.player\n    // but guard against errors and console.warn instead\n    if (!this.player || !this.player[method]) {\n        var message = \"ReactPlayer: \".concat(this.constructor.displayName, \" player could not call %c\").concat(method, \"%c – \");\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    return (_this$player = this.player)[method].apply(_this$player, args);\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode() {\n    var video = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement(\"video\");\n    // Check if Safari supports PiP, and is not on mobile (other than iPad)\n    // iPhone safari appears to \"support\" PiP through the check, however PiP does not function\n    var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ })

};
;